from sage.all import(
    QQ,
    is_prime,
    SymmetricGroup,
    EllipticCurve, EllipticCurve_from_j,
    divisors,
    gcd,
)
import functools
from random import choice
from collections import defaultdict
from setting import *


def Val(*args):
    if len(args) == 1:
        v, = args
        if isinstance(v, Parameter):
            return v.value
        args = list(args)
        return Val(*args)
    return [Val(v) for v in args]


def unwrap1(func):
    @functools.wraps(func)
    def func2(clself, val):
        if isinstance(val, Parameter):
            val = val.v
        return func(clself, val)

def unwrap2(func):
    @functools.wraps(func)
    def func2(clself, val1, val2):
        if isinstance(val1, Parameter):
            val1 = val1.v
        if isinstance(val2, Parameter):
            val2 = val2.v
        return func(clself, val1, val2)


def child(parent):
    def func(child):
        assert child.LEVEL % parent.LEVEL == 0
        d = child.LEVEL // parent.LEVEL
        assert d > 0
        #assert d == 1 or is_prime(d)
        child.PARAMETERS_COVER[d] = parent
        parent.PARAMETERS_MERGE[d] = child
        return child
    return func


def extra_child(parent):
    def func(child):
        assert child.LEVEL % parent.LEVEL == 0
        d = child.LEVEL // parent.LEVEL
        assert d == 1 or is_prime(d)
        child.PARAMETERS_COVER[d] = parent
        #parent.PARAMETERS_MERGE[d] = child
        return child
    return func


# base class for typing
class Param:
    def __init_subclass__(cls):
        cls.PARAMETERS_COVER = {}
        cls.PARAMETERS_MERGE = {}


class Parameter(Param):
    LETTER = "t"
    GENUS = NotImplemented
    LEVEL = NotImplemented
    DEGREE = NotImplemented
    EXP = NotImplemented  # LEVEL factorization
    DEFAULT_SETTING = RationalSetting()
    PARAMETERS_COVER = NotImplemented # {d: cls}
    PARAMETERS_MERGE = NotImplemented
    TREE = NotImplemented
    SYMMETRY_GENERATORS = NotImplemented


    raw_to_Maier = NotImplemented
    raw_from_Maier = NotImplemented

    DOMAIN = QQ

    def __init__(self, value=None, S=None):
        if S is None:
            S = self.DEFAULT_SETTING
        self.S = S

        assert not isinstance(value, Parameter), "double wrapping a parameter"

        if value is None:
            value = self._var()
        elif S is not None:
            value = self._wrap(value)  # cast to Fp2 or Fp2 var

        self.value = value

    def to_Maier(self):
        if self.raw_to_Maier is NotImplemented:
            raise ValueError("Maier08 only covers genus-0 X_0(N) cases")
        return self.raw_to_Maier(self.value)

    @classmethod
    def from_Maier(cls, value, S=None):
        if cls.raw_from_Maier is NotImplemented:
            raise ValueError("Maier08 only covers genus-0 X_0(N) cases")
        return cls(cls.raw_from_Maier(value), S=S)

    def _wrap(self, value):
        return self.S.ONE * value

    def _var(self):
        if self.S is not None:
            return self.S.Fp2vars(self.LETTER)[0]
        else:
            return QQ[self.LETTER].gen()

    @classmethod
    def random(cls, S):
        return cls(S.Fp2.random_element(), S)

    # accept raw (field) values / variables
    # def raw_left2(self, p): raise NotImplementedError()
    # def raw_right2(self, p): raise NotImplementedError()
    # raw_merge better fits the deeper parameter,
    # but if it needs the instance, we don't have it before
    # computing it
    # def raw_merge2(self, p, q): raise NotImplementedError()
    # def raw_phi_eq2(self, p, q): raise NotImplementedError()
    # def raw_dual_eq2(self, p, q): raise NotImplementedError()
    # not using raw_dual_eq since can be computed faster by rational maps
    # def raw_dual2(self, p): raise NotImplementedError()

    # def raw_tail_one2(self, p): raise NotImplementedError()
    # def raw_tail_two2(self, p): raise NotImplementedError()
    # def raw_head_one2(self, p): raise NotImplementedError()
    # def raw_head_two2(self, p): raise NotImplementedError()

    def raw_phi_eq1(self, p, q): return p-q
    # def raw_phi_eq3(self, p, q): raise NotImplementedError()

    def new(self, v) -> Param:
        return type(self)(v, S=self.S)

    def _split_ell(self, l=None):
        """Split level l into prime factor included in the current level and another factor."""
        if l is None:
            l = min(self.EXP)
        if self.LEVEL % l:
            raise ValueError("left(%d) while level is only %d (not divisible)", l, self.LEVEL)
        if l == 1:
            return None

        if l in self.EXP:
            d, l = l, 1
        else:
            for d in self.EXP:
                if d > 1 and l % d == 0:
                    l //= d
                    break
            else:
                assert 0
        return d, l

    def left(self, l=None) -> Param:
        if l == 1:
            return self
        ell, l = self._split_ell(l)
        cls2 = self.PARAMETERS_COVER[ell]
        value2 = getattr(self, "raw_left%d" % ell)(self.value)
        ret = cls2(value2, S=self.S)
        if l > 1:
            ret = ret.left(l=l)
        return ret

    def right(self, l=None) -> Param:
        if l == 1:
            return self
        ell, l = self._split_ell(l)
        cls2 = self.PARAMETERS_COVER[ell]
        value2 = getattr(self, "raw_right%d" % ell)(self.value)
        ret = cls2(value2, S=self.S)
        if l > 1:
            ret = ret.right(l=l)
        return ret

    def split(self, l=None) -> Param:
        if l is None:
            l = min(self.EXP)
        return self.left(l), self.right(l)

    def merge(self, q: Param, l=None, check=True) -> Param:
        if type(self) == type(q):
            if l is None:
                l = min(self.EXP)
            if check:
                assert self.phi(q, l=l) == 0
            value2 = getattr(self, "raw_merge%d" % l)(self.value, q.value)
        else:
            assert l is None, "no need to pass l"
            # merge bar
            l = q.LEVEL
            d2 = self.LEVEL
            assert gcd(l, self.LEVEL) == 1
            if check:
                assert self.right(self.LEVEL) == q.right(q.LEVEL)

            method = getattr(self, "raw_merge_bar%d" % l, None)
            if method is None and hasattr(q, "raw_merge_bar%d" % self.LEVEL):
                return q.merge(self, check=check)
            value2 = method(self.value, q.value)

        cls2 = self.PARAMETERS_MERGE[l]
        return cls2(value2, S=self.S)

    def merge_sample_left(self, l=None) -> Param:
        return self.sample_bk(l=l).merge(self, l=l)

    def merge_sample_right(self, l=None) -> Param:
        return self.merge(self.sample_fw(l=l), l=l)

    def __or__(self, q: Param) -> Param:
        assert type(q) == type(self)
        return self.merge(q)

    def dual(self, l=None, ignore_extra_level=False) -> Param:
        """Note: powers of primes are ignored (e.g. dual(2), dual(4), ... are the same)"""
        if l is None:
            l = self.LEVEL
        l_start = l

        value = self.value
        for d in self.EXP:
            if d > 1 and l % d == 0:
                value = getattr(self, "raw_dual%d" % d)(value)
                while l % d == 0:
                    l //= d
        if l > 1 and not ignore_extra_level:
            raise ValueError("dual(%d) but %d does not divide the level %d" % (l_start, l_start, self.LEVEL))
        return self.new(value)
    w = dual

    __invert__ = dual

    def turn_tail_one(self, l=None, num=1):
        if l is None:
            l = min(self.EXP)
        method = getattr(self, "raw_turn_tail_one%d" % l)
        return self.new(applyN(method, num, self.value))

    def turn_tail_two(self, l=None, num=1):
        if l is None:
            l = min(self.EXP)
        method = getattr(self, "raw_turn_tail_two%d" % l)
        return self.new(applyN(method, num, self.value))

    def turn_head_one(self, l=None, num=1):
        if l is None:
            l = min(self.EXP)
        method = getattr(self, "raw_turn_head_one%d" % l)
        return self.new(applyN(method, num, self.value))

    def turn_head_two(self, l=None, num=1):
        if l is None:
            l = min(self.EXP)
        method = getattr(self, "raw_turn_head_two%d" % l)
        return self.new(applyN(method, num, self.value))

    def turn_head(self, l=None, num=1):
        if l is None:
            l = min(self.EXP)
        if l not in self.EXP:
            raise ValueError("the parameter l should be prime")
        if self.EXP[l] >= 4:
            return self.turn_head_two(l, num=num)
        elif self.EXP[l] >= 2:
            method = getattr(self, "raw_turn_head_one%d" % l)
        else:
            raise ValueError("turn head not supported")
        return method()

    def mirror(self, l=None):
        if l is None:
            l = min(self.EXP)
        value2 = getattr(self, "raw_mirror%d" % l)(self.value)
        return self.new(value2)

    def phi(self, q: Param, l=None) -> int:
        """Is `q` next on a path? 0 = True"""
        if l is None:
            l = min(self.EXP)
        value2 = getattr(self, "raw_phi_eq%d" % l)(self.value, q.value)
        return value2

    def to_X0(self):
        """Return the main parameter for this LEVEL."""
        return self

    def j_tree(self, values=True):
        if values:
            return [self.TREE[i](self).to_X0().value for i in range(len(self.TREE))]
        else:
            return [self.TREE[i](self).to_X0() for i in range(len(self.TREE))]

    def j_path(self, values=True):
        """Return parametrized j-invariant path."""
        assert len(self.EXP) == 1, "j-path is ~unique only for prime-power levels"
        if self.LEVEL == 1:
            v = self.to_X0()
            return [v.value if values else v]

        path = self.left().j_path()
        v = self.right()
        while v.LEVEL != 1:
            v = v.right()

        v = v.to_X0()
        path.append(v.value if values else v)
        return path

    def j_seq(self):
        return [self.j_by_d(d) for d in divisors(self.LEVEL)]

    def j_by_d(self, d):
        t = self
        assert 1 <= d <= self.LEVEL
        assert self.LEVEL % d == 0
        for l, e in self.EXP.items():
            if l == 1:
                continue
            while d % l == 0:
                t = t.right(l=l)
                d = d // l
                e -= 1
            while e > 0:
                t = t.left(l=l)
                e -= 1
        assert d == 1
        return t.value

    # def j(self, i, values=True) -> "element":
    #     assert len(self.EXP) == 1, "j-path is ~unique only for prime-power levels"
    #     v = self
    #     while v.LEVEL > 1:
    #         if i > 0:
    #             v = v.right()
    #             i -= 1
    #         else:
    #             v = v.left()
    #     return v.value if values else v

    # def jp(self, i) -> Param:
    #     return self.j(i, values=False)

    def proj(self, i, l=None, h=None):
        """Projection through all/`h` levels by main up-left/up-right projections"""
        assert i >= 0
        if l is None:
            l = min(self.EXP)
        if h is None:
            h = self.EXP[l]
        i0 = i


        v = self
        for _ in range(h):
            if i > 0:
                v = v.right()
                i -= 1
            else:
                v = v.left()
        if i:
            raise ValueError(f"proj({i0}) failed: out of bounds by {i}")
        return v

    def leaf(self, i, values=False):
        """Projection to the tree leaf"""
        v = self.TREE[i](self)
        return v.value if values else v

    def expand_fw_one(self, l=None, parent=None):
        if l is None:
            l = min(self.EXP)
        poly = lambda B: getattr(self, "raw_phi_eq%d" % l)(self.value, B)
        roots = self.S.roots(poly)
        return [self.new(r) for r in roots if r != parent]

    def expand_bk_one(self, n=1, l=None, parent=None):
        if l is None:
            l = min(self.EXP)
        poly = lambda B: getattr(self, "raw_phi_eq%d" % l)(B, self.value)
        roots = self.S.roots(poly)
        return [self.new(r) for r in roots if r != parent]

    def expand_fw(self, n=1, l=None, parent=None):
        """All parameters reachable by exactly `n` forward Phi-steps."""
        if l is None:
            l = min(self.EXP)
        assert n >= 0
        if n == 0:
            return [self]

        sub = self.expand_fw_one(l=l, parent=parent)
        if n == 1:
            return sub

        ret = []
        for p in sub:
            ret.extend(p.expand_fw(n=n-1, l=l, parent=self.value))
        return ret

    def expand_bk(self, n=1, l=None, parent=None):
        """All parameters reachable by exactly `n` backward Phi-steps."""
        if l is None:
            l = min(self.EXP)
        assert n >= 0
        if n == 0:
            return [self]

        sub = self.expand_bk_one(l=l, parent=parent)
        if n == 1:
            return sub

        ret = []
        for p in sub:
            ret.extend(p.expand_bk(n=n-1, l=l, parent=self.value))
        return ret

    def sample_fw(self, n=1, l=None, width=1, skip=1):
        """Sample `n` forward Phi-steps randomly.
        If `width` > 1, then return tuples of consequtive `width` parameters."""
        if l is None:
            l = min(self.EXP)
        lst = [self]
        parent = None
        for i in range(n + skip + width - 2):
            lst.append(choice(lst[-1].expand_fw_one(l=l, parent=parent)))
            parent = lst[-2].value

        if width == 1:
            ret = lst[skip:]
        else:
            ret = list(zip(*[lst[skip+i:] for i in range(width)]))
        return ret if len(ret) > 1 else ret[0]

    def sample_bk(self, n=1, l=None, width=1, skip=1):
        """Sample `n` backward Phi-steps randomly.
        If `width` > 1, then return tuples of consequtive `width` parameters."""
        if l is None:
            l = min(self.EXP)
        lst = [self]
        parent = None
        for i in range(n + skip + width - 2):
            lst.append(choice(lst[-1].expand_bk_one(l=l, parent=parent)))
            parent = lst[-2].value

        if width == 1:
            ret = lst[skip:]
        else:
            ret = list(zip(*[lst[skip+i:] for i in range(width)]))
        return ret if len(ret) > 1 else ret[0]

    def __repr__(self):
        return f"<{type(self).__name__}:{self.LETTER}={self.value}>"

    def __eq__(self, other):
        if isinstance(other, Parameter):
            return self.LEVEL == other.LEVEL and self.value == other.value
        return self.value == other

    def __hash__(self):
        return hash(self.value)

    @classmethod
    def symmetry_group(cls, S, debug=True):
        x = cls.random(S)
        tree = x.j_tree()

        SG = SymmetricGroup(len(cls.TREE))

        gens = []
        for name, gen in cls.SYMMETRY_GENERATORS.items():
            xi = gen(x)
            treei = xi.j_tree()
            if debug:
                print(name)
            cycles = expanded_to_cycles(tree, treei, debug=debug)
            if debug:
                print(cycles)
                print()
            gens.append(SG([_incl(c) for c in cycles]))

        subgroup = SG.subgroup(gens)
        if debug:
            print("GAP ID", subgroup.group_id())
            print("GAP ID", subgroup.structure_description())
        return subgroup

    @classmethod
    def automorphisms(cls, S=None):
        x = cls(S=S)
        seen = {x}
        gens = cls.SYMMETRY_GENERATORS.values()
        queue = [x]
        while queue:
            f = queue.pop()
            for gen in gens:
                ff = gen(f)
                if ff not in seen:
                    seen.add(ff)
                    queue.append(ff)
        return sorted(f.value for f in seen)

    def conjugates(self):
        seen = {self}
        gens = self.SYMMETRY_GENERATORS.values()
        queue = [self]
        while queue:
            f = queue.pop()
            for gen in gens:
                ff = gen(f)
                if ff not in seen:
                    seen.add(ff)
                    queue.append(ff)
        return sorted(seen)

    @classmethod
    def from_j(cls, j, offset=0, all=False):
        S = j.S
        L = cls(S=S)
        func = L.leaf(offset).value  # func(t) = j
        eq = func.numerator() - j.value * func.denominator()
        lst = []
        for t in eq.roots(multiplicities=False):
            t = cls(t, S=S)
            if not all:
                return t
            lst.append(t)
        return lst

    def is_supersingular(self):
        j0 = self.leaf(0)
        return EllipticCurve_from_j(j0.value).is_supersingular()

    def radical2(self):
        # Warning: not always meaningful
        return self.new(-self.value)

    def radical3(self):
        # Warning: not always implemented/meaningful
        return self.new(self.value * self.S.ζ3)

    def radicand_bk(self, d):
        field = QQ if self.S is None else self.S.Fp2
        R, t = field['t'].objgen()
        param = self.new(t)
        eq = param.right(d).value #R(getattr(self, "raw_right%d" % d)(t))
        const = eq.subs(t=0)

        coef = (eq - const) // t**d
        coef = field(coef)
        assert eq == coef * t**d + const
        radicand = param.left(d).value #getattr(self, "raw_left%d" % d)(t)
        radicand = (radicand + const) / coef
        return radicand

    def radicand_dual_fw(self, d):
        """
        Returns radicand expression for the self.dual()
        """
        field = QQ if self.S is None else self.S.Fp2
        R, t = field['t'].objgen()
        param = self.new(t)
        eq = param.right(d).value  # R(getattr(self, "raw_right%d" % d)(t))
        const = eq.subs(t=0)

        coef = (eq - const) // t**d
        coef = field(coef)
        assert eq == coef * t**d + const
        #t = getattr(self, "raw_dual%d" % d)(t)
        radicand = param.dual(d).left(d).value # getattr(self, "raw_left%d" % d)(t)
        radicand = (radicand + const) / coef
        return radicand


class Level1(Parameter):
    """j-invariant j"""
    LETTER = "j"
    GENUS = 0
    LEVEL = 1
    DEGREE = 1
    EXP = defaultdict(int, {1: 1})  # p: 0
    TREE = {
        0: lambda j: j,
    }
    TREE_EDGES = {}
    SYMMETRY_GENERATORS = dict()

    # trivial
    raw_to_Maier = lambda self, t: t
    raw_from_Maier = lambda cls, t: t

    raw_dual_eq1 = lambda j, jj: j - jj
    raw_dual1 = lambda j: j

    raw_merge2 = lambda self, j, jj: (4096*j*jj - 2949120*(j+jj) - 66562560000) / (j**2 + 195120*j + 4095*jj + 660960000)  # or swap j, jj and dual(DD)\n"
    raw_phi_eq2 = lambda self, j, jj: j**3 + jj**3 - 162000*(j**2 + jj**2) + 1488*(j**2*jj + j*jj**2) - j**2*jj**2 + 8748000000*(j + jj) + 40773375*j*jj - 157464000000000

    raw_merge3 = (
        lambda self, l, r:
        (l*r**3 + 19129644*l*r**2 - 756*r**3 + 531440*l**2 + 76509442080*l*r + 23150726640*r**2 - 48430448640000*l - 14204206448640000*r + 97844723712000000000)
        / (729*l**2*r + 196830*l*r**2 + r**3 - 524880*l**2 + 18821147040*l*r - 103456080*r**2 + 14229831680000*l + 276373831680000*r - 3623878656000000000)
    )
    raw_phi_eq3 = lambda self, x, y: -x**3*y**3 + 2232*x**3*y**2 + 2232*x**2*y**3 + x**4 - 1069956*x**3*y + 2587918086*x**2*y**2 - 1069956*x*y**3 + y**4 + 36864000*x**3 + 8900222976000*x**2*y + 8900222976000*x*y**2 + 36864000*y**3 + 452984832000000*x**2 - 770845966336000000*x*y + 452984832000000*y**2 + 1855425871872000000000*x + 1855425871872000000000*y

    raw_merge5 = (
        lambda self, l, r:
        (-6972338362500*l**4*r**5 + 23431635573734375*l**4*r**4 + 19988476692875000*l**3*r**5 - 24289468037181843750*l**4*r**3 + 32037551445904738822968750*l**3*r**4 - 15834442385559956900*l**2*r**5 + 35415052*l*r**6 + 7829189031558583828125*l**4*r**2 + 3918611456028060831793781015625*l**3*r**3 - 136588261448535262496610722625*l**2*r**4 + 2904194272991253114435*l*r**5 - 26561289000*r**6 + 6972338362500*l**5 - 329265439933512667031250*l**4*r + 4448022906783601738837182440625000*l**3*r**2 - 14317176616247285081540550641543548500*l**2*r**3 - 1080145526037181712186566709158620*l*r**4 + 21296102287304201673750*r**5 - 12109928177569897183500000*l**4 - 1600788043028131491499990375050000000*l**3*r + 3490665645915755366863656589114287068280000*l**2*r**2 - 749630569709583323353708701481238456822400*l*r**3 - 136793535751114421900365386771660000*r**4 + 42569663018190542866080799138145894400*l**3 - 21110792708561106855955931200426512061984407552*l**2*r + 24075903933400624356904789472979606636488294400*l*r**2 + 5907170352085698628141933730410494119116800000*r**3 - 20593863007546977418086558154888445475459956736000*l**2 + 37896141747499570641696885981524481861832805449728000*l*r - 17074972102662833041767676678411142795478486220800000*r**2 + 136871890351243820191370144317100976212352518213074944000*l + 607111229649648302261350912857270605343467558141952000000*r - 1347783015758831819414416926921373057405615298165342208000000)
        / (1090857847503972354184570312500*l**3*r**3 - 15623427741647144897460937500*l**2*r**4 + 162837630782043100*l*r**5 + 35415052*r**6 - 20043705078125*l**5 - 40213206831319384765625*l**4*r + 8505367870377351252711599121093750*l**3*r**2 + 1038491015485081298658383044433593750*l**2*r**3 - 7426243187085498639249678847625*l*r**4 - 118635867859890185565*r**5 + 28364591563425987187500000*l**4 + 3125663389947740858124001031250000000*l**3*r + 9509204450486056243658234333203125000000*l**2*r**2 - 21189128744864514142655194732928930736000*l*r**3 + 497880118400155651819696890278880*r**4 - 96125693789242525230255882240000000000*l**3 - 5929400038806235462613315170572288000000000000*l**2*r - 84735280927702052298569335110984471250206720000*l*r**2 - 86373622554063089962607166082429608158822400*r**3 + 24645436088331096660420590898039935571763553894400*l**2 - 5933529010086285285638522326028474828859479584407552*l*r + 956111246552734528762149980040767777552533448294400*r**2 - 16627902285957365886779946776170127954234651166375936000*l - 46028874014157511042644228506309427968986636338855936000*r + 123528151832777898842154678888791806235639982355271122944000)
    )
    raw_phi_eq5 = lambda self, x, y: -x**5*y**5 + 3720*x**5*y**4 + 3720*x**4*y**5 - 4550940*x**5*y**3 + 1665999364600*x**4*y**4 - 4550940*x**3*y**5 + 2028551200*x**5*y**2 + 107878928185336800*x**4*y**3 + 107878928185336800*x**3*y**4 + 2028551200*x**2*y**5 + x**6 - 246683410950*x**5*y + 383083609779811215375*x**4*y**2 - 441206965512914835246100*x**3*y**3 + 383083609779811215375*x**2*y**4 - 246683410950*x*y**5 + y**6 + 1963211489280*x**5 + 128541798906828816384000*x**4*y + 26898488858380731577417728000*x**3*y**2 + 26898488858380731577417728000*x**2*y**3 + 128541798906828816384000*x*y**4 + 1963211489280*y**5 + 1284733132841424456253440*x**4 - 192457934618928299655108231168000*x**3*y + 5110941777552418083110765199360000*x**2*y**2 - 192457934618928299655108231168000*x*y**3 + 1284733132841424456253440*y**4 + 280244777828439527804321565297868800*x**3 + 36554736583949629295706472332656640000*x**2*y + 36554736583949629295706472332656640000*x*y**2 + 280244777828439527804321565297868800*y**3 + 6692500042627997708487149415015068467200*x**2 - 264073457076620596259715790247978782949376*x*y + 6692500042627997708487149415015068467200*y**2 + 53274330803424425450420160273356509151232000*x + 53274330803424425450420160273356509151232000*y + 141359947154721358697753474691071362751004672000

    raw_merge7 = (
        lambda self, l, r:
        (48477021263909151019881831460891586933242662265693146048360488644344126714980836157013001132036576112004*l**6*r**8 + 78476226102431598563806827219920923059521412809487094370368841597061946754403334032958337594095840234421139*l**7*r**6 - 61398592098558469416864062206120872408343613193283391987875886410184242404932520077458126530989411433449092890393411647738*l**6*r**7 - 211109151039718319421899054723884660091624655175975118064455329913911100895278008150301398198118697357221712*l**5*r**8 - 350003968416844929594578449400847316845465501130312440891845033522896282524638869786994185669667447445518279940*l**7*r**5 + 150174386678327455131907911255628982795548000390823733847696130281407439714099591425914662551664589457141756583088995106877841*l**6*r**6 + 289797587386882794678312237225424920938603148336595831725024732347131072928107212512082178991021883120635363617870931840121714*l**5*r**7 + 325766107272955605675763890773100071640629834160109522784257421443083111198334587121489212369871207526849945214*l**4*r**8 + 557720337000588054885161826164439410464020943053359546367943209280911637530466422538810620697351904086800560124930*l**7*r**4 + 170522536517074185806028926119383747320840791404836552849429802147103485108281622005634402488118659674598916346997709457715184698*l**6*r**5 + 31231486846985831680088928226204779745008143995501819000916656535132369723551722451991649390096913428570057520991740885916475633642770846*l**5*r**6 - 498127510559010891538938987690510496076553855872319865194723907872151095837525639765080919455091997189559061043616870255006253691*l**4*r**7 - 211657932446587944931688104079646918148202418371747379336489037875878643700646980799528128653340634566075565454264*l**3*r**8 - 379185776864655072651162262659441899658133059899149388163776287262508391559776223325153521479054993754225046351300600*l**7*r**3 - 787324226869465675239048477939436723287016857174596567366621935963334903399867910793670585991765210731752310207408064789780295091114*l**6*r**4 + 2909878455273779580687791256462825051977756078618701854581839886859708242759822627355965101708562318039367349383941104164287806942778984566418*l**5*r**5 + 9630106374795542584944315403741564213116841547983534797551384557299198289103219658819759766718645873313466964027796852277943160265604226009932*l**4*r**6 + 376248016929562686516353789395909108700414830417871392526272904273989999930539089730255845829609312641836399725496690213675068646771*l**3*r**7 + 52380975968053437691439270709763264990585773532020164894048530062076645636194347309842916923368789541956754965014970*l**2*r**8 - 246223734337873198260287032135449593834086723345420841155415368821650159562483295359723088611638322*l*r**9 + 101714245226443591048944500630877279450119304378382230839669083818556225780819701097523159281409694840673164466511697975*l**7*r**2 + 750990331132984769200980165502853011715617099869430167034704945420523293593027642714373323283570790945960088138554729941802781568030920*l**6*r**3 + 729545923251259719247045300259151634530688574154424618960636538934079592774493796833608962987176735881881766978546233981901964001277493784821625350*l**5*r**4 - 2988955951566188944935070663976067668974955344605596755950862097857979279342836328422835769153721643403246768812331781174015935299618193572659564021896*l**4*r**5 + 295062325851230814488035635101085325359265731801320088239219782245287109716035146270975579462953094274501544069137634137513254588080330063452799892*l**3*r**6 - 117863826050217860667490518130748334633870488416505483951858375696321541922705881868100351287207928632587609345509602216880516420974966*l**2*r**7 - 2167542191830544199033872546297522995543670273201586209067652304463858330336127020429700794848284069859197179513160003*l*r**8 + 184175353284729152298694700037316296187896869062374789184250695878594319352737504929072870281505464856*r**9 - 7510868407199672979973927241912866456533108282131691452427398445814229205081226887146413368966027319509462307262451525336*l**7*r - 248000407376541657966800611087266298891596614901386857923290088452724463663550916873303633736662412665925841221066208933764713128133714571*l**6*r**2 + 8098894649558334572346199329871216013472260577280793059711023062855914736308612364799890754802742134164031679535273525545826280396606824419497470601556*l**5*r**3 + 4535572734216541061049500690790921128774297634869659209619814036693190410566477518491008690520222345240746345721790587328658832367514877648700942570127125690*l**4*r**4 - 906242099705310626978843324178492321515705965000831908542039430196976609640800474250522164577759970911741401395239818970754476915321523347703522685675978964*l**3*r**5 + 927510788605154659451251097649411789870677122616414871093263664719737849625715802095828284359635050520945571269337646087902060817580127701858867507301*l**2*r**6 + 12272130028122184978003479967492235471512051132359739878789437458291797330849326384489252203492987804056028945099369127337945399725446800*l*r**7 - 500100026667768911657809848077500287932979448601436222065821273303170458130876057180604507890933026004852504279248745164*r**8 + 318286954759395744349703649220313801785029665872339872004711693185742188568395969720252662806818532095912513403616673688284*l**7 + 20109463751684627758655853570205553911444605571423507715138986049475974159658660580129224521211030101591059785194731398222059525856631569323*l**6*r + 4428233658630319480807957736660781358795255346656602055596167400334860760498298990510301423923562770040962320965465923224666993906915512810137806260285630*l**5*r**2 + 690114128151813591169365998473429212613244946240634852140264195068124306229303615329520395863466773336170033195253485382576327279816978201771180864271034914196785*l**4*r**3 + 21774974990168622374073574695041978132478867877499139272552851058333116375435400906518951410241533206078348403090132403772683260045048345064979253099392054149965920*l**3*r**4 - 51427336873535388176072886078002920557650541307352380491437205162779486819015172753847261007959383706524798045038036934241569341952736018843507259457045129985731*l**2*r**5 + 401494069926582668983788436761897402892980632726572552151279777476507322833274831510195646586912477359277531484288543156998776845922888150007666246367718*l*r**6 - 271279249443753783385370726493601648285262849064051153874392955152304972632772518302003697055809779408994350240242911450120927912474232825*r**7 + 445780874241051916041228068779603532960240575780547783961285710831740125334666495963447166234410305856009068404460432731884537608871318008000*l**6 - 1783836404769055667499741795198860574187688314448348992736105517428151300164090293168372061998287693366410231790830409673690479027494635887458989560185404800*l**5*r - 15116130024052835160620766436917858092248713560813161401632534987390319333605380830938478937035989005704178099561866257103012123861495474240455490637921781621838321600*l**4*r**2 + 77631985920453823828299547775508137086870782145807225889081107734957153570462703074759779573819333162526208221464662306620003712866847347689746630111382625021148793337600*l**3*r**3 - 26208940291025752404506514097973377330416908933351546407000819717686704152193437193118261393775353909832439589868330224192120266944191427322201924664528047207163391953600*l**2*r**4 + 2013968301815599462615433602133522296334134801948230704949053804699157138656523685692801265312738523727951171315233085531310235742364969443956177430561040125015465600*l*r**5 + 16126012037575772562436357806902254481087842039043568606945321136017896694897471284685438790207652399431730032917357120465059568781342131630797870825265600*r**6 - 111606512171253744534321267949196638426896061738813366906431801274949845293543531421041884390654098205149947488041411280582674658050296474212854635036672000000*l**5 - 42636755051399997575279809972865861536655039136217403930780304472252238366180473901678403302020434251741705618434669142066572004234274433628646030885792947052132433920000*l**4*r + 1344156956443774563361641624809293058919494318872467905754918576313499190460869837873391606667322631308013279986058418709714523399394794652610679293829061206026801449533440000*l**3*r**2 + 33294537715408974253964848982407761453113309868324470806347070818870260389868518377273675454424823387211640217209693766503793409847501279791498916332060624206962257090314240000*l**2*r**3 + 241102830888454415105681713282441093567200407187939617642877127849055398910900177330668704027013554009450725408662528321360404007116067849450831120017785118519419842068480000*l*r**4 - 5922379098502180492036821685590600831224936004644631718714466479242418224239056285541040347612524976918750553514200771736888073062658362329719734334988707737200230400000*r**5 + 263911908608953673717904987999033334250182147401171209076429749775806553472555960839638420346962059068220153439593587055233401376356913058969454724304871583853817364480000000*l**4 - 63105510914658327848979845637461340722024557595411141815681703892371090566760293681117540807848614684309341802115261390800098600581287286587040027431502937760801834171105280000000*l**3*r + 3724103883270294255023974919104292270344665598138004387327327098084992713592098365562096221027400776485413910618217380038929830223706673504778559644225936388323798043779399680000000*l**2*r**2 - 1624770190220726789911682831642621339638457545845198393721089981072139803862324995910479623127580340652433646851934417699922116789882064578533777215099477729577569522422906880000000*l*r**3 + 3921264942216236135324945543854548414408521450382513540120560648809077065311139451046269762979115073364856143307395897000567990175230094854768310970055761246927126716743680000000*r**4 - 128459595565573774300833083726778864517519173809534426440701730795096102448176649645398382290596097846876166324691084949409683647347179882193876457518746070164607862413721600000000000*l**3 - 68095928228827706641363159708234598235564722665423214488570998666009331195875736716988776341462796624550485782615547248619469843229924829279545997111267108369345960015298560000000000000*l**2*r - 158316465223466596421579676908078682040848549239094370806318732031931652183605584401347483693965408957343720009772141570666304212026296323625057745294423446128903833041187635200000000000*l*r**2 - 5990739673405091398083240578722020341056090411167378041706380797933680453804483709257572138154713842659249678401782048507296235813920070990789922495767309542159582805937356800000000000*r**3 + 81338170274048940053222965592169366272139120454489586976255526581125156203493920418673354192213729212709554053393071196274748144943617784078119261084726170107839318004586250240000000000000*l**2 + 252265250036023396276734965527274443783100543969446428753832885522004782166548679316142612621652638972940121268307715269256881193653164797448311295974333512583779771128196628480000000000000*l*r + 333106109701039187202324272233586359413148269972929864509107879919540343615939849524668791216317755908447734009722017509991058590749761212132824617111139974509249310430058250240000000000000*r**2 - 582404875705197822153350300624675608950130292784520787279788925885429949119352315278645769608232853262342004849267521296610829279573784264470281725525766549550806798539161600000000000000000000*l + 641585887093060836054128177722628734156784798461193630291675942396118781569909949470089611047916325430399101407524014007099365530248245079729290816789313148954144554772070400000000000000000000*r) \
        / (170682556455767064861133598744083270879182573633943892767976988457401570328629131782635626723993608725417287086783127846960693577371339805140260964673*l**4*r**5 + 15088021488350803281998216150663197773518179136858751085402221424388600949003008826765806440409223673599589311307607844612163538019*l**2*r**7 - 634981531938706168842481516808456231535601204609899217933442308782145282428077385302490713967102086686150505149530*l*r**8 - 246223734337873198260287032135449593834086723345420841155415368821650159562483295359723088611638322*r**9 + 1601555634743502011506261779998386184888192098152797844293241665246162178661292531284864032532568168049411*l**8 + 4529439737164852660577005583309073380418148150147137214004163341862636569394214381396490013074533888731364494962166119152*l**7*r - 97523321295642467582017544367830204263638782707883555717723048517977169219551000421220462557747547854114081827820066364385722138141644926*l**6*r**2 + 10529880779688302528019304625098065007515312028514332384753855790547194266035665746892865866238644642608367646213208220744690757077102359055283520358192*l**5*r**3 + 1321993047679231090148253807291261399555243398048491761168477956802105208661795193613763727093045972745783518110195723806910306402432356355920770909794776440*l**4*r**4 - 32674507133484327696919624943975529314506199948953396237661189161958530087836439898346268898387678928782891147292429872685475148245188274771763550392825160*l**3*r**5 - 2955973749727393990973600137835347324974638903361563965103450204805626387783742783067087818495143237260203496946691651101767607412913120359256900346*l**2*r**6 - 6873179262607060315072961878007102639168830186665788358838015702872588932364008973017952713510438275587063826127218289470556183799544*l*r**7 + 853379222883877675521735859469634758459380095013094736709643496330437600897968790261696798058205255520020342312060061*r**8 - 6848977217962920063035198847531437198666158961798823402345111050444778466900848572854612555605899044970729489164882433219667*l**7 + 43832347817519556576831503081108076897271421865492879995348489047192489437818392586105242704223825843885459856601742746550352199497778965292*l**6*r + 35470770488431764324393291376527689219944507119974372249857945079237153267741848873554599571697770199960340336159053282470672133143278085346068520508516655*l**5*r**2 - 109017399608744646007736876167040780008204467085491251345924774087526071854434922764170817506510163625658715484405561893020028390894038173420672728713070188840190*l**4*r**3 - 9994065451896933628050844791794807946893700135845545740125951561019229463184493458965762678648642461226114894675274995199750002763627049325646896628987783121644405*l**3*r**4 - 4120746575851957421722676224471410954139091038333258608183023712785030385814990872256447896828478219857405420915601100887523583721808162987125846778703584067912*l**2*r**5 - 1939911911308017913404707224391029413526558391455204108866106853534860459618577863715113251651693199530155013772650668797349887042893332710282562081223*l*r**6 + 694084131961564218542977289270211794329372451246443540236002913896799190033631753787219801487656460163290188797611575900795349126114170*r**7 - 4324769550030637245317825898784024966922302115657218214549759535560082075984840479411017987280523802289990824571170941839710667232149427829680*l**6 + 14248362579507865629208013985524060762983744438668534264630748997924676778579938307032353145331610675542687149197082214024373090325863807345519749969880274720*l**5*r - 10452916082785375159256363804435732422642010912051473266711020436531045905011166416269000658836370719906563682611016834227286114343540440161302457897405068576794181200*l**4*r**2 - 2908165075775092848452313573095741639186517492741952697404486361299259474527248545693925640090898283037944845529553626304684950385080166908248687189122030182960329409600*l**3*r**3 + 1217377423789074148693847401790411737808153921889055475993954460127861478171109457001332335421241324139645661138627436272238785839733146229177824929421537498706697050800*l**2*r**4 - 3962246145193170764531786474190806673818516888901262940977868502743871797862888127875740443620152599792223117480582645192994528367880147811600836385312849357946080*l*r**5 - 81071517890145176966347450890567428961336307477537876186654803390905227511483036335925795010174385203444238992751542567968720924737606496008184618120880*r**6 + 492216746906319696507287826598463777717835621040487957407561369796063636727900410467291140977914593280293398819936620944575245280527126641783932584603484160000*l**5 + 145869932681749378151563693580999306186245000094326796868215938580349614524829675998559160384867880985962283051389992621643165910766410550319858734058524521551687188480000*l**4*r + 1325024136594112503011599693551447590169288947328979489514307627291048363550141018445797785550482115189516839583349311877860042861587957819975396998389963656070706716016640000*l**3*r**2 + 4567786148847626673504070714443932670998459074604872289050588390361609082438578641922236228735348461455097663220170433893629234190914184084726915087982082916715238120816640000*l**2*r**3 + 33260515203757391501574776772851188365130678980819183646880795311270441142229833303322007080264380052888953743730388783098363148342549434401027997089034394969598193172480000*l*r**4 + 99185622694487626094499959461970333233808512661071908152360298295996830303634693495703685720195430509827038926402378343449779410493771615627320247359973580255068160000*r**5 - 315741918079840517975648998018735094273843845726475238342969834217922690721077311365123335393001281297670661745205478361525354934194751411197893051489833287371047567360000000*l**4 + 25629760667057141943238011990255142409245874004292861057063245554672335408379532238591861391192446335533257965387221771025733759635833016462343424316418828544172302637465600000000*l**3*r - 1411964567652964247926705483687287255266840588760275086270485953259860120452021775544255896045464750210326110145362872274184243417640525166412779091132171435072684796705505280000000*l**2*r**2 + 312687035565920611213711714003804286467589993508073319301358376415737424815205467015425181247443489737136238081449473538703840804935085614709203817103092506321663313523507200000000*l*r**3 - 275354080946063972443882224673424495935497672387503103924659307777042910899297800019120202155722044820342177302000056054692566432649548530926290275723986422957211186626560000000*r**4 + 32761494845640591846221863739140362999115310930581245568126563887276333808426335877444366089038654422873276448168817549591684299747089109097829774484121909424139339133091840000000000*l**3 + 15097622601704325089352955844952374202949776944466980559098002394822096329994649157616839241381362094210391359147501123433628923152360764725517467280070208489321721104558981120000000000*l**2*r + 26939636649027332314081892109886406763412283741449850720830492704114397842593296182577105621055299610459623203161490401173370564577230354300533518234168858039907725223888158720000000000*l*r**2 + 584633020994757360458133964962913331249480856063950589269511094748718120191518498115774187644996649043132187625604878268639391495275537184466029701194929698120798412671549440000000000*r**3 - 15303627076733952129413084120299128442871792913440779904067827645290774854088431611980450997892820958432351770739785454415769337235126869051644167922194092370268162247727513600000000000000*l**2 - 23897933633732828593072767431467598314263141341705765110697021236392528273123486604227821184988336161774429228886509138247792647458554232028206765453392200703549199044784947200000000000000*l*r - 44661495245512256578283314330289952594318978505396846644359216655552889029292207019629155179063398163133430228657612345776161815281538083785088864514522058185117494823983513600000000000000*r**2 + 25668018120967881963455472200519848143785001808086790188296036997814648896351753769431397729763440119980436276565080656718710182689345665666738555952581442512345637480038400000000000000000000*l - 134685143903703742291931881148341846172892357041627950815677635443931991145742300595487790811709292013816611949395140260763644358386554117568612594515624823636156829243801600000000000000000000*r)
    )
    raw_phi_eq7 = lambda self, x, y: -x**7*y**7 + 5208*x**7*y**6 + 5208*x**6*y**7 - 10246068*x**7*y**5 + 312598931380281*x**6*y**6 - 10246068*x**5*y**7 + 9437674400*x**7*y**4 + 177089350028475373552*x**6*y**5 + 177089350028475373552*x**5*y**6 + 9437674400*x**4*y**7 - 4079701128594*x**7*y**3 + 4460942463213898353207432*x**6*y**4 - 18300817137706889881369818348*x**5*y**5 + 4460942463213898353207432*x**4*y**6 - 4079701128594*x**3*y**7 + 720168419610864*x**7*y**2 + 16125487429368412743622133040*x**6*y**3 + 14066810691825882583305340438456800*x**5*y**4 + 14066810691825882583305340438456800*x**4*y**5 + 16125487429368412743622133040*x**3*y**6 + 720168419610864*x**2*y**7 + x**8 - 34993297342013192*x**7*y + 10685207605419433304631062899228*x**6*y**2 - 901645312135695263877115693740562092344*x**5*y**3 + 88037255060655710247136461896264828390470*x**4*y**4 - 901645312135695263877115693740562092344*x**3*y**5 + 10685207605419433304631062899228*x**2*y**6 - 34993297342013192*x*y**7 + y**8 + 104545516658688000*x**7 + 1038063543615451121419229773824000*x**6*y + 11269804827778129625111322263056523132928000*x**5*y**2 + 17972351380696034759035751584170427941396480000*x**4*y**3 + 17972351380696034759035751584170427941396480000*x**3*y**4 + 11269804827778129625111322263056523132928000*x**2*y**5 + 1038063543615451121419229773824000*x*y**6 + 104545516658688000*y**7 + 3643255017844740441130401792000000*x**6 - 40689839325168186578698294668599003971584000000*x**5*y + 308718989330868920558541707287296140145328128000000*x**4*y**2 - 5397554444336630396660447092290576395211374592000000*x**3*y**3 + 308718989330868920558541707287296140145328128000000*x**2*y**4 - 40689839325168186578698294668599003971584000000*x*y**5 + 3643255017844740441130401792000000*y**6 + 42320664241971721884753245384947305283584000000000*x**5 + 553293497305121712634517214392820316998991872000000000*x**4*y + 72269669689202948469186346100000679630099972096000000000*x**3*y**2 + 72269669689202948469186346100000679630099972096000000000*x**2*y**3 + 553293497305121712634517214392820316998991872000000000*x*y**4 + 42320664241971721884753245384947305283584000000000*y**5 + 41375720005635744770247248526572116368162816000000000000*x**4 - 129686683986501811181602978946723823397619367936000000000000*x**3*y - 46666007311089950798495647194817495401448341504000000000000*x**2*y**2 - 129686683986501811181602978946723823397619367936000000000000*x*y**3 + 41375720005635744770247248526572116368162816000000000000*y**4 + 13483958224762213714698012883865296529472356352000000000000000*x**3 - 838538082798149465723818021032241603179964268544000000000000000*x**2*y - 838538082798149465723818021032241603179964268544000000000000000*x*y**2 + 13483958224762213714698012883865296529472356352000000000000000*y**3 + 1464765079488386840337633731737402825128271675392000000000000000000*x**2 + 1221349308261453750252370983314569119494710493184000000000000000000*x*y + 1464765079488386840337633731737402825128271675392000000000000000000*y**2

    _raw_merge13 = None
    def raw_merge13(self, l, r):
        if self._raw_merge13 is None:
            from extra13 import raw_merge13
            self._raw_merge13 = raw_merge13
        return self._raw_merge13(None, l, r)

    raw_phi_eq13 = lambda self, x, y: (
        -x**13*y**13 + 9672*x**13*y**12 + 9672*x**12*y**13 - 40616316*x**13*y**11 + 63336131453282305176*x**12*y**12 - 40616316*x**11*y**13 + 97116140576*x**13*y**10 + 5339704017492387472276862944*x**12*y**11 + 5339704017492387472276862944*x**11*y**12 + 97116140576*x**10*y**13 - 145742356534710*x**13*y**9 + 7038227861570702862399825051262104*x**12*y**10 - 936062849021824119784660671862200161988*x**11*y**11 + 7038227861570702862399825051262104*x**10*y**12 - 145742356534710*x**9*y**13 + 142727120530755696*x**13*y**8 + 1017131468961830048705766611220442641072*x**12*y**9 + 214191411057420328765018422101187988893741675744*x**11*y**10 + 214191411057420328765018422101187988893741675744*x**10*y**11 + 1017131468961830048705766611220442641072*x**9*y**12 + 142727120530755696*x**8*y**13 - 91944131414745883208*x**13*y**7 + 32988905472599070890328795217808043240900816*x**12*y**8 - 1967575998834670421411906070499119710120923910594022072*x**11*y**9 + 2303156526339236416244981158503557124969923397655602595936*x**10*y**10
        - 1967575998834670421411906070499119710120923910594022072*x**9*y**11 + 32988905472599070890328795217808043240900816*x**8*y**12 - 91944131414745883208*x**7*y**13 + 38373375189621696878784*x**13*y**6 + 333551826778342195432371586876023049547129080896*x**12*y**7 + 2117324199178304244393290847066787694415213468957410146838208*x**11*y**8 + 333376714930461597630366410672145363642373801348744230962709165120*x**10*y**9 + 333376714930461597630366410672145363642373801348744230962709165120*x**9*y**10 + 2117324199178304244393290847066787694415213468957410146838208*x**8*y**11 + 333551826778342195432371586876023049547129080896*x**7*y**12 + 38373375189621696878784*x**6*y**13 - 9980376107988974265288009*x**13*y**5 + 1234257162452453722866237618078783279952599399679176*x**12*y**6 - 481806591005250661668209263946913789583739163176277250633369496316*x**11*y**7 + 2965269806029300518982153645576999878343315273199400249881587616072766840*x**10*y**8 - 344642844610887365333843812260789022299828714507153260278660403308943561718*x**9*y**9
        + 2965269806029300518982153645576999878343315273199400249881587616072766840*x**8*y**10 - 481806591005250661668209263946913789583739163176277250633369496316*x**7*y**11 + 1234257162452453722866237618078783279952599399679176*x**6*y**12 - 9980376107988974265288009*x**5*y**13 + 1508484527780717514871680200*x**13*y**4 + 1787206767475651398304042906319887696372425891847417480*x**12*y**5 + 33157532644992168541479115114277423707920632043639237944990254217082784*x**11*y**6 + 3319074015126775003340627498451966608621776985617068464040481273875824853713440*x**10*y**7 + 11510485988607799847944664306226745280653016997751179971212105953518910829665118960*x**9*y**8 + 11510485988607799847944664306226745280653016997751179971212105953518910829665118960*x**8*y**9 + 3319074015126775003340627498451966608621776985617068464040481273875824853713440*x**7*y**10 + 33157532644992168541479115114277423707920632043639237944990254217082784*x**6*y**11 + 1787206767475651398304042906319887696372425891847417480*x**5*y**12
        + 1508484527780717514871680200*x**4*y**13 - 117589277940072151921466095740*x**13*y**3 + 1010922460622081033367079280521141037085193349093095277208*x**12*y**4 - 874174690463455858478740034973677797874649720724911207202908349653368101836*x**11*y**5 + 707602306954335961264387747392830714609124951294341249227988393380722334150416923424*x**10*y**6 - 28971833722004769608218351898602997023873718918496584569542741468721604925350565276800952*x**9*y**7 + 763629377534280239525001752797018342037897631130969295340196615666330614048031692849601680*x**8*y**8 - 28971833722004769608218351898602997023873718918496584569542741468721604925350565276800952*x**7*y**9 + 707602306954335961264387747392830714609124951294341249227988393380722334150416923424*x**6*y**10 - 874174690463455858478740034973677797874649720724911207202908349653368101836*x**5*y**11 + 1010922460622081033367079280521141037085193349093095277208*x**4*y**12 - 117589277940072151921466095740*x**3*y**13 + 3813066975450671721121304807712*x**13*y**2
        + 207577177886168263601723424708043354620195244558620874018272*x**12*y**3 + 10335702376336052876569385632176208762756384874046214470799722804104208232161120*x**11*y**4 + 36877562398966114743254895852508154513817343754571889820596205093997469123113726984508320*x**10*y**5 + 8968707059877929793953816639999625053085656781146444057912686388706404082753228694260847129920*x**9*y**6 + 2155218753344782821853617766133779473725138989326106677408530224250256987904613455196577522696384*x**8*y**7 + 2155218753344782821853617766133779473725138989326106677408530224250256987904613455196577522696384*x**7*y**8 + 8968707059877929793953816639999625053085656781146444057912686388706404082753228694260847129920*x**6*y**9 + 36877562398966114743254895852508154513817343754571889820596205093997469123113726984508320*x**5*y**10 + 10335702376336052876569385632176208762756384874046214470799722804104208232161120*x**4*y**11 + 207577177886168263601723424708043354620195244558620874018272*x**3*y**12 + 3813066975450671721121304807712*x**2*y**13
        + x**14 - 32685702714621175092948209889806*x**13*y + 12893770087100209197778927627416397147602669299324665034127451*x**12*y**2 - 60259084880308652560754125957376955923094701831235097378932424092592846288059835756*x**11*y**3 + 539434066952838633601058314080351829728768185613881497302494155281483862817525900116623514601*x**10*y**4 - 474980656775733704222417133934306465523573652393831168608700490473956434788522583600537536840594898*x**9*y**5 + 415431723402642702720731130934926941857797474097020970018619513668017459051573659373309870938643397563*x**8*y**6 - 3539294606963747267479265746594748156709881306171284362655032102198235369837795589356541679185977279848*x**7*y**7 + 415431723402642702720731130934926941857797474097020970018619513668017459051573659373309870938643397563*x**6*y**8 - 474980656775733704222417133934306465523573652393831168608700490473956434788522583600537536840594898*x**5*y**9 + 539434066952838633601058314080351829728768185613881497302494155281483862817525900116623514601*x**4*y**10
        - 60259084880308652560754125957376955923094701831235097378932424092592846288059835756*x**3*y**11 + 12893770087100209197778927627416397147602669299324665034127451*x**2*y**12 - 32685702714621175092948209889806*x*y**13 + y**14 + 15787756016985099663979167744000*x**13 + 157870586217596053304332218736965888119051656824626442141696000*x**12*y + 179312619437995268862785568892538140587316635932472934686318597956817819648897662976000*x**11*y**2 + 2308916580373705363546321120346521865137649088713708960950564814885950596793631208268755124224000*x**10*y**3 + 5716677920985743655201500120101677007190102608912515081206876829642793929337037298192242022307430400000*x**9*y**4 + 5757558921048446015266554919402344737333501100152974630225108131920384126722107536788649181513676013568000*x**8*y**5 + 187433051934148497537178792064160144226449743146562769523813325806108271927829978476604969216803944169472000*x**7*y**6 + 187433051934148497537178792064160144226449743146562769523813325806108271927829978476604969216803944169472000*x**6*y**7
        + 5757558921048446015266554919402344737333501100152974630225108131920384126722107536788649181513676013568000*x**5*y**8 + 5716677920985743655201500120101677007190102608912515081206876829642793929337037298192242022307430400000*x**4*y**9 + 2308916580373705363546321120346521865137649088713708960950564814885950596793631208268755124224000*x**3*y**10 + 179312619437995268862785568892538140587316635932472934686318597956817819648897662976000*x**2*y**11 + 157870586217596053304332218736965888119051656824626442141696000*x*y**12 + 15787756016985099663979167744000*y**13 + 83084413350616406183495875982586495825900375128760385536000000*x**12 - 260241334661897724169148477062778090370575619826743149104887568856318553170833833984000000*x**11*y + 2678665736689769049900018109140598264035750069305308244518131035743577819824227828206936260608000000*x**10*y**2 - 20678078537212882761694153848026684161510425619867392882628417971589808513139875419201055859633291264000000*x**9*y**3 - 6095414391440954795178869663499425828291538452766653566256327921063584062137305104052711687223009869824000000*x**8*y**4
        - 3702665127143760979998154278812085426166716114551745045128607584536820099329002243268464660519705479479296000000*x**7*y**5 + 21919503989502556482532977985659185423685666886088290313930781118854798926106308297736210617657464845238272000000*x**6*y**6 - 3702665127143760979998154278812085426166716114551745045128607584536820099329002243268464660519705479479296000000*x**5*y**7 - 6095414391440954795178869663499425828291538452766653566256327921063584062137305104052711687223009869824000000*x**4*y**8 - 20678078537212882761694153848026684161510425619867392882628417971589808513139875419201055859633291264000000*x**3*y**9 + 2678665736689769049900018109140598264035750069305308244518131035743577819824227828206936260608000000*x**2*y**10 - 260241334661897724169148477062778090370575619826743149104887568856318553170833833984000000*x*y**11 + 83084413350616406183495875982586495825900375128760385536000000*y**12 + 145746271865985701303006968690727073623110154189151557978520314340489760352149438464000000000*x**11
        + 618365025729687208026621844082518672586866478732183940869747889968364543178129991952544825344000000000*x**10*y + 25872463908449289016750628555567372710185328848483463083494077182570444339188517407317465229936295936000000000*x**9*y**2 - 62333021735677560171642749900635564915892941745383692317263013992372210489562891779314959788281383878656000000000*x**8*y**3 - 18313220589707554303919628836565371160582541687979396960418053123247399413186658869150749995799620001726464000000000*x**7*y**4 - 1410473999113376096921325206927033932443299808279922080543730137710923836158828899053966820213587545583255552000000000*x**6*y**5 - 1410473999113376096921325206927033932443299808279922080543730137710923836158828899053966820213587545583255552000000000*x**5*y**6 - 18313220589707554303919628836565371160582541687979396960418053123247399413186658869150749995799620001726464000000000*x**4*y**7 - 62333021735677560171642749900635564915892941745383692317263013992372210489562891779314959788281383878656000000000*x**3*y**8
        + 25872463908449289016750628555567372710185328848483463083494077182570444339188517407317465229936295936000000000*x**2*y**9 + 618365025729687208026621844082518672586866478732183940869747889968364543178129991952544825344000000000*x*y**10 + 145746271865985701303006968690727073623110154189151557978520314340489760352149438464000000000*y**11 + 7605348735017212625875837184978457615081634815943367015020891775626681233374752203029348352000000000000*x**10 - 8674072694766581259832161984558424258242345509461562068916284333261672299485935075259027823494430720000000000000*x**9*y + 367699880302507769522184906338576349930282889799687609612600740135262931410546189503475085055061919793152000000000000*x**8*y**2 + 303628396849623247388501617704769126069627806954925724909207701265590212162332663163323999037945093480775680000000000000*x**7*y**3 + 17722361050304472620163034691211680403065699682566045788144444570455590725483253301914282961928612252886237184000000000000*x**6*y**4 + 5627576194161215810088198676115700033241050131121473877965970475637724125302025889733550246015725064794669056000000000000*x**5*y**5
        + 17722361050304472620163034691211680403065699682566045788144444570455590725483253301914282961928612252886237184000000000000*x**4*y**6 + 303628396849623247388501617704769126069627806954925724909207701265590212162332663163323999037945093480775680000000000000*x**3*y**7 + 367699880302507769522184906338576349930282889799687609612600740135262931410546189503475085055061919793152000000000000*x**2*y**8 - 8674072694766581259832161984558424258242345509461562068916284333261672299485935075259027823494430720000000000000*x*y**9 + 7605348735017212625875837184978457615081634815943367015020891775626681233374752203029348352000000000000*y**10 + 132287948592242819730686388197721726586421046648941198415164132202495387061267918873489002706501632000000000000000*x**9 - 913844005726821508929480521086904504761295550807304466343649705885472617699094229816628221421776732684288000000000000000*x**8*y - 226668496996199203777352229716417461096995804909768763297196647245168959821482189931394270493086737753964544000000000000000*x**7*y**2
        - 17733806301048501011486217516580565338695560468655559232106708808776991496975958558628543386809658957681917952000000000000000*x**6*y**3 + 828973674649555922651050874150305990627094598448649047796953362599591050742151260055665892525003926982843432960000000000000000*x**5*y**4 + 828973674649555922651050874150305990627094598448649047796953362599591050742151260055665892525003926982843432960000000000000000*x**4*y**5 - 17733806301048501011486217516580565338695560468655559232106708808776991496975958558628543386809658957681917952000000000000000*x**3*y**6 - 226668496996199203777352229716417461096995804909768763297196647245168959821482189931394270493086737753964544000000000000000*x**2*y**7 - 913844005726821508929480521086904504761295550807304466343649705885472617699094229816628221421776732684288000000000000000*x*y**8 + 132287948592242819730686388197721726586421046648941198415164132202495387061267918873489002706501632000000000000000*y**9 + 767013621315952423931475176267170123577142608595930709148835175130350223089832292329376203694232005771264000000000000000000*x**8
        - 465337020884877935874185748520218965445631193822519111113045800260798180133962179115662432186399226106740736000000000000000000*x**7*y + 175801761541721296614163144760797961999581545737966242399898402245904424096892942484369837626392492960431210496000000000000000000*x**6*y**2 - 941802378462465511244447050809161114536892868345640328360842000821724559505492381497133977607854427475915309056000000000000000000*x**5*y**3 + 4081674117329728804489206772464831122415122070151308117835102044725072517715001683094459791402673386965744746496000000000000000000*x**4*y**4 - 941802378462465511244447050809161114536892868345640328360842000821724559505492381497133977607854427475915309056000000000000000000*x**3*y**5 + 175801761541721296614163144760797961999581545737966242399898402245904424096892942484369837626392492960431210496000000000000000000*x**2*y**6 - 465337020884877935874185748520218965445631193822519111113045800260798180133962179115662432186399226106740736000000000000000000*x*y**7 + 767013621315952423931475176267170123577142608595930709148835175130350223089832292329376203694232005771264000000000000000000*y**8
        + 66829334150181693395733549605487911633242059793148257435222656254771339933627547003847032182942337299644416000000000000000000000*x**7 + 34208636313948962505255416382800378890590483698550917680568729071142350960549152337412536609529405160000847872000000000000000000000*x**6*y - 5648591949659254685659692003344338379638954758557151198844390691020983772484333009507611037427149946420681768960000000000000000000000*x**5*y**2 - 24885848452127894014624454936412695642180132782686131038890849143846266810389567025962091921161996214123131568128000000000000000000000*x**4*y**3 - 24885848452127894014624454936412695642180132782686131038890849143846266810389567025962091921161996214123131568128000000000000000000000*x**3*y**4 - 5648591949659254685659692003344338379638954758557151198844390691020983772484333009507611037427149946420681768960000000000000000000000*x**2*y**5 + 34208636313948962505255416382800378890590483698550917680568729071142350960549152337412536609529405160000847872000000000000000000000*x*y**6
        + 66829334150181693395733549605487911633242059793148257435222656254771339933627547003847032182942337299644416000000000000000000000*y**7 + 3268240030696916778423724456839641770009309037438345492166218927315814548015978322807870290034191070539022336000000000000000000000000*x**6 + 1617796325733693961426612991967106010346218233891170279500742895526209242404102299051177796077528512644260036608000000000000000000000000*x**5*y + 58405353917014162404952148388731205467622015248477898593099624781969985828433123084038663979821981572463218130944000000000000000000000000*x**4*y**2 - 4983534780898623837208148120899538170442693994917976285662769716226848993219053110271292940660067899070381817856000000000000000000000000*x**3*y**3 + 58405353917014162404952148388731205467622015248477898593099624781969985828433123084038663979821981572463218130944000000000000000000000000*x**2*y**4 + 1617796325733693961426612991967106010346218233891170279500742895526209242404102299051177796077528512644260036608000000000000000000000000*x*y**5
        + 3268240030696916778423724456839641770009309037438345492166218927315814548015978322807870290034191070539022336000000000000000000000000*y**6 + 95888722830042559821615002218841595211920062873311035820055532712656384110985948315484610123352758708871364608000000000000000000000000000*x**5 - 4772454395099970588376889812892387899584728241524331459452038527296029061412099051047499510623295031345026170880000000000000000000000000000*x**4*y + 60459932962707148685750780439295720777105469153376987257360608129644675668266607620124314344109550426506206904320000000000000000000000000000*x**3*y**2 + 60459932962707148685750780439295720777105469153376987257360608129644675668266607620124314344109550426506206904320000000000000000000000000000*x**2*y**3 - 4772454395099970588376889812892387899584728241524331459452038527296029061412099051047499510623295031345026170880000000000000000000000000000*x*y**4 + 95888722830042559821615002218841595211920062873311035820055532712656384110985948315484610123352758708871364608000000000000000000000000000*y**5
        + 1885223597142817735215521923030446116923320678716240056759672332116990135924145606946025364033903751052868452352000000000000000000000000000000*x**4 - 185232507560749354757488264428490031076630581809117895374513401195331750782161966573976898709883093065359517810688000000000000000000000000000000*x**3*y + 26281453854686565480854489645262487309390226496990889730097271768767754182467308700379350639320763133343165317120000000000000000000000000000000*x**2*y**2 - 185232507560749354757488264428490031076630581809117895374513401195331750782161966573976898709883093065359517810688000000000000000000000000000000*x*y**3 + 1885223597142817735215521923030446116923320678716240056759672332116990135924145606946025364033903751052868452352000000000000000000000000000000*y**4 + 22236398027215399937779019690353966999876882002081199329677306063131993047041542443852802352851578390365960404992000000000000000000000000000000000*x**3 - 37066027755072565194081927511328660876696510055655033788696425898925604370808677258232777955584843608603884519424000000000000000000000000000000000*x**2*y
        - 37066027755072565194081927511328660876696510055655033788696425898925604370808677258232777955584843608603884519424000000000000000000000000000000000*x*y**2 + 22236398027215399937779019690353966999876882002081199329677306063131993047041542443852802352851578390365960404992000000000000000000000000000000000*y**3 + 147213371414156573713539483874043827500390696883068187579053600467101994104225901089258359895920442702174699388928000000000000000000000000000000000000*x**2 - 33905309938808933226695939390198532869912468194279700917160273935527359588865865248595689625551089671051614879744000000000000000000000000000000000000*x*y + 147213371414156573713539483874043827500390696883068187579053600467101994104225901089258359895920442702174699388928000000000000000000000000000000000000*y**2
    )


class Gamma2(Parameter):
    """Cube root of j"""
    NAME = "Xns+(3)"
    LETTER = "γ2"
    GENUS = 0
    LEVEL = 1
    DEGREE = 3
    DEFAULT_SETTING = CubicSetting()
    EXP = defaultdict(int, {1: 1})  # p: 0

    TREE = {
        0: lambda g: Level1(g.value**3, g.S),
    }
    TREE_EDGES = {}
    SYMMETRY_GENERATORS = dict(
        radical3=lambda R: R.radical3(),
    )

    raw_merge2 = lambda self, l, r: (r**2 + 15*l) / (l*r - 225)
    raw_phi_eq2 = lambda self, l, r: l**3 + r**3 - l**2*r**2 + 495*l*r - 54000

    def to_X0(self):
        return self.leaf(0)


@child(Gamma2)
class Gamma2_Level2(Parameter):
    LETTER = "d"
    GENUS = 0
    LEVEL = 2
    DEGREE = 9
    DEFAULT_SETTING = CubicSetting()
    EXP = defaultdict(int, {2: 1})

    TREE = {
        0: lambda r: r.proj(0),
        1: lambda r: r.proj(1),
    }
    TREE_EDGES = {}
    SYMMETRY_GENERATORS = dict(
        # non-commute (dual*radical3 = radical3^-1*dual)
        dual=lambda R: R.dual(2),
        radical3=lambda R: R.radical3(),
    )

    raw_left2 = lambda self, d: (d**3 + 256) / d**2
    raw_right2 = lambda self, d: (d**3 + 16) / d
    raw_phi_eq2 = lambda self, a, b: b**2 - a**2*b - 16*a
    raw_dual2 = lambda self, a: 16/a
    raw_merge2 = lambda self, a, b: (4 / a, b * (4 / a)**2 / 8 - 1)

    to_X0 = lambda self: Level2(self.value**3, S=self.S)


class Gamma3(Parameter):
    """Square root of (j-1728)"""
    LETTER = "γ3"
    GENUS = 0
    LEVEL = 1
    DEGREE = 2
    EXP = defaultdict(int, {1: 1})  # p: 0
    TREE = {
        0: lambda g: Level1(g.value**2 + 1728, S=g.S),
    }
    TREE_EDGES = {}
    SYMMETRY_GENERATORS = dict(
        radical2=lambda R: R.radical2(),
    )

    def to_X0(self):
        return self.leaf(0)

    raw_merge3 = (
        lambda self, l, r:
        (l*r**3 + 728*l**2 - 339696*l*r + 264600*r**2 - 3755372544) \
        / (27*l**2*r + 486*l*r**2 - r**3 + 7388416*l + 10273536*r)
    )
    raw_phi_eq3 = lambda self, l, r: l**4 + r**4 - l**3*r**3 - 1476*l**3*r - 67770*l**2*r**2 - 1476*l*r**3 - 153538560*l**2 - 1002115072*l*r - 153538560*r**2 - 2056275099648


@child(Gamma3)
class Gamma3_Level3(Parameter):
    GENUS = 0
    LEVEL = 3
    DEGREE = 8
    EXP = defaultdict(int, {3: 1})
    TREE = {
        # TBD ? 3-isogeny
        0: lambda r: r.proj(0),
        1: lambda r: r.proj(1),
    }
    TREE_EDGES = {}
    SYMMETRY_GENERATORS = dict(
        # commute
        radical2=lambda R: R.radical2(),
        dual3=lambda R: R.dual(3),
    )

    raw_left3 = lambda self, t: -(t - 9)*(t**3 + 81*t**2 + 243*t + 2187) / t**3 + 72 # +72 could go into gamma
    raw_right3 = lambda self, t: -(t + 3) * (t**3 - 3*t**2 + 27*t - 9) / t + 72 # +72 could go into gamma

    raw_phi_eq3 = lambda self, a, b: -a**3*b**2 + 27*a**2*b - 18*a*b**2 + b**3 - 729*a
    raw_dual_eq3 = lambda self, a, b: a*b + 27
    raw_dual3 = lambda self, a: -27/a
    # raw_merge3 = (
    #     lambda self, l, r:

    # )

    #
    to_X0 = lambda self: Level3(self.value**2, S=self.S)


@child(Level1)
class Level2(Parameter):
    """Montgomery discriminant D"""
    LETTER = "D"
    GENUS = 0
    LEVEL = 2
    DEGREE = 3
    EXP = defaultdict(int, {2: 1})
    TREE = {
        0: lambda D: D.proj(0),
        1: lambda D: D.proj(1),
    }
    TREE_EDGES = {2: [(0, 1)]}
    SYMMETRY_GENERATORS = dict(
        dual=lambda D: D.dual(2),
    )

    raw_to_Maier = lambda self, t: t
    raw_from_Maier = lambda cls, t: t

    raw_left2 = lambda self, D: (D + 256)**3/D**2
    raw_right2 = lambda self, D: (D + 16)**3/D

    raw_merge2 = lambda self, D, DD: 2 - (DD+256)/(D+16)/4 # (8*D - DD - 128) / (4*(D+16))
    raw_phi_eq2 = lambda self, D, DD: D*(D*DD + 48*DD + 4096) - DD**2
                                   # a*b*(a+48) - b**2 + 4096*a
    raw_dual_eq2 = lambda self, D, DD: D*DD - 4096
    raw_dual2 = lambda self, D: 4096 / D

    raw_phi_eq3 = lambda self, l, r: l**3*r**3 + 72*l**3*r**2 + 72*l**2*r**3 - l**4 + 900*l**3*r - 28422*l**2*r**2 + 900*l*r**3 - r**4 + 294912*l**2*r + 294912*l*r**2 + 16777216*l*r
    raw_merge3 = (
        lambda self, l, r:
        (l*r**3 - 900*l*r**2 + 28*r**3 + 80*l**2 - 17568*l*r + 27216*r**2 + 32768*l + 2654208*r) \
        / (9*l**2*r + 270*l*r**2 + r**3 + 144*l**2 - 25632*l*r + 2448*r**2 + 32768*l + 294912*r)
    )
    raw_merge_bar3 = lambda self, l, r: (l*r + r**2 + 10*r - 27) / (r**2 - 3*l + 18*r - 3)

    raw_phi_eq5 = lambda self, l, r: l**5*r**5 + 120*l**5*r**4 + 120*l**4*r**5 + 4380*l**5*r**3 - 905720*l**4*r**4 + 4380*l**3*r**5 + 49120*l**5*r**2 + 97804320*l**4*r**3 + 97804320*l**3*r**4 + 49120*l**2*r**5 - l**6 + 90630*l**5*r - 746465295*l**4*r**2 + 33983400980*l**3*r**3 - 746465295*l**2*r**4 + 90630*l*r**5 - r**6 + 201195520*l**4*r + 400606494720*l**3*r**2 + 400606494720*l**2*r**3 + 201195520*l*r**4 + 73484206080*l**3*r - 15195460075520*l**2*r**2 + 73484206080*l*r**3 + 8246337208320*l**2*r + 8246337208320*l*r**2 + 281474976710656*l*r
    raw_merge5 = (
        lambda self, l, r:
        (-894300*l**4*r**5 - 105119125*l**4*r**4 - 79186200*l**3*r**5 - 3710527750*l**4*r**3 + 962399540750*l**3*r**4 - 1435731660*l**2*r**5 + 3252*l*r**6 - 39070725375*l**4*r**2 - 159289449461375*l**3*r**3 - 37469550161825*l**2*r**4 + 5526540107*l*r**5 + 81300*r**6 + 454925*l**5 - 69722997125*l**4*r + 1037477502038250*l**3*r**2 - 59994049068190050*l**2*r**3 - 579730641710375*l*r**4 + 63842084375*r**5 - 77989364800*l**4 + 2382379409248000*l**3*r - 2741251232008291200*l**2*r**2 + 420194278224096000*l*r**3 + 590033419800000*r**4 - 121158512803840*l**3 - 1559322087075479552*l**2*r + 21894036086964224000*l*r**2 + 416463401369600000*r**3 - 13005800385544192*l**2 - 465729704881343692800*l*r + 70865495061954560000*r**2 + 3267868129639792640000*r) \
        / (42296124337500*l**3*r**3 - 13947396562500*l**2*r**4 + 224089140*l*r**5 + 3252*r**6 + 439375*l**5 + 8079781875*l**4*r - 980074823031250*l**3*r**2 - 14204426406331250*l**2*r**3 + 76881983868675*l*r**4 + 4899383807*r**5 + 117857060000*l**4 - 2112402473360000*l**3*r + 466212892599000000*l**2*r**2 - 294069493185116800*l*r**3 + 101161464100000*r**4 + 618803773440000*l**3 + 6549077596815360000*l**2*r + 62983960447716556800*l*r**2 + 88819771392000000*r**3 + 205352569520783360*l**2 - 680959375163158167552*l*r + 16719099556003840000*r**2 + 13317939594797252608*l + 816967032409948160000*r)
    )
    raw_merge_bar5 = lambda self, l, r: (l*r - 4*r**2 + l - 24*r - 4) / (r**3 + 13*r**2 - l + 35*r - 1)  # fixed order

    raw_merge_bar9 = lambda self, l, r: (-l*r**6 + 28*l*r**3 + 64*r**3 + 3*l**2 - 48*l - 1536) / (4*l*r**4 - 32*r**4 - l**2*r - 104*l*r + 896*r) # fixed order


@child(Level2)
class Level4(Parameter):
    """Montgomery curve A"""
    LETTER = "A"
    GENUS = 0
    LEVEL = 4
    DEGREE = 6
    EXP = defaultdict(int, {2: 2})
    TREE = {
        0: lambda A: A.proj(0),
        1: lambda A: A.proj(1),
        2: lambda A: A.proj(2),
        #
        3: lambda A: A.turn_tail_one().proj(0),
    }
    #    3
    #    |
    # 0--1--2
    TREE_EDGES = {2: [(0, 1), (1, 2), (1, 3)]}
    SYMMETRY_GENERATORS = dict(
        dual=lambda A: A.dual(2),
        turn_tail_one=lambda A: A.turn_tail_one(),
    )

    raw_to_Maier = lambda self, t: -4*t-8
    raw_from_Maier = lambda cls, t: -t/4-2

    raw_left2 = lambda self, A: -4*(A+2)**2/(A-2)
    raw_right2 = lambda self, A: 16*(A**2-4)
    raw_merge2 = lambda self, A, AA: (AA - 6) / (4*A)
    raw_phi_eq2 = lambda self, A, AA: 4*(A**2-4)*(AA-2) + (AA+2)**2  # = (AA-6)**2 - 4*(2-AA)*A**2
    raw_dual_eq2 = lambda self, A, AA: (A+2)*(AA+2)-16
    raw_dual2 = lambda self, A: 16 / (A+2) - 2

    raw_turn_tail_one2 = lambda self, A: -A
    raw_turn_head_one2 = lambda self, A: 2*(A+6)/(A-2)

    raw_phi_eq3 = lambda self, l, r: 16*l**3*r**3 - l**4 - 60*l**3*r + 186*l**2*r**2 - 60*l*r**3 - r**4 - 768*l**2 + 256*l*r - 768*r**2 + 3072
    raw_merge3 = (
        lambda self, l, r:
        (4*l*r**3 + 2*l**2 + 12*l*r + 114*r**2 - 576) \
        / (3*l**2*r - 18*l*r**2 - r**3 + 112*l - 48*r)
    )
    raw_merge_bar3 = lambda self, l, r: (-8*l**3*r + 24*l**3 - l*r**2 + 18*l*r - 81*l) / (32*l**4 - 144*l**2 - 2*r**2 - 36*r + 54)

    # γ3(τ) = (j-1728)^1/2
    raw_gamma3 = lambda self, A: -4*A*(A**2 - 36)/(A**2 - 4)
    # -4*A*(A-6)*(A+6) / ((A-2)(A+2))
    # -4*A*(1 - 32/(A**2-4))
    # -4*A + 128*A/(A**2-4)
    gamma3 = lambda self: Gamma3(self.raw_gamma3(self.value), S=self.S)
    # https://arxiv.org/pdf/math/0611041.pdf p.17


@child(Level4)
class Level8(Parameter):
    """Montgomery 2-kernel a"""
    LETTER = "a"
    GENUS = 0
    LEVEL = 8
    DEGREE = 12
    EXP = defaultdict(int, {2: 3})
    TREE = {
        0: lambda a: a.proj(0),
        1: lambda a: a.proj(1),
        2: lambda a: a.proj(2),
        3: lambda a: a.proj(3),
        #
        4: lambda a: a.turn_tail_one().proj(0),
        5: lambda a: a.turn_head_one().proj(3),
    }
    #    4  5
    #    |  |
    # 0--1--2--3
    TREE_EDGES = {2: [(0, 1), (1, 2), (2, 3), (1, 4), (2, 5)]}
    SYMMETRY_GENERATORS = dict(
        dual=lambda a: a.dual(2),
        turn_tail_one=lambda a: a.turn_tail_one(),
    )

    raw_to_Maier = lambda self, t: 4*t-4
    raw_from_Maier = lambda cls, t: t/4+1

    raw_left2 = lambda self, a: -a-1/a
    raw_right2 = lambda self, a: 2-4*a**2
    raw_merge2 = lambda self, a, aa: (aa + 1) / (2*a)
    raw_phi_eq2 = lambda self, a, aa: (aa+1)**2 - 4*a**2*aa
    raw_dual_eq2 = lambda self, a, aa: (a-1)*(aa-1)-2
    raw_dual2 = lambda self, a: (a+1)/(a-1)

    raw_turn_tail_one2 = lambda self, a: -a
    raw_turn_head_one2 = lambda self, a: 1/a


@child(Level8)
class Level16(Parameter):
    """Montgomery 4-kernel r"""
    LETTER = "r"
    GENUS = 0
    LEVEL = 16
    DEGREE = 24
    DEFAULT_SETTING = ComplexSetting()
    EXP = defaultdict(int, {2: 4})
    TREE = {
        0: lambda r: r.proj(0),
        1: lambda r: r.proj(1),
        2: lambda r: r.proj(2),
        3: lambda r: r.proj(3),
        4: lambda r: r.proj(4),
        #
        5: lambda r: r.turn_tail_one().proj(0),
        6: lambda r: r.right(2).turn_tail_one().proj(0),
        7: lambda r: r.turn_tail_two().proj(0),
        8: lambda r: r.turn_tail_two().turn_tail_one().proj(0),
        9: lambda r: r.turn_head_one().proj(4),
    }
    #     7   8
    #      \ /
    #    5  6  9
    #    |  |  |
    # 0--1--2--3--4
    TREE_EDGES = {2: [
        (0, 1), (1, 2), (2, 3), (3, 4),
        (1, 5),
        (2, 6), (6, 7), (6, 8),
        (3, 9)
    ]}
    SYMMETRY_GENERATORS = dict(
        dual=lambda r: r.dual(2),
        turn_tail_two=lambda r: r.turn_tail_two(),
    )

    raw_to_Maier = lambda self, t: 2*t-2
    raw_from_Maier = lambda cls, t: t/2+1

    raw_left2 = lambda self, r: (r+1/r)/2
    raw_right2 = lambda self, r: r**2
    raw_merge2 = lambda self, r, rr: (2/rr, 4*r/rr)
    raw_phi_eq2 = lambda self, r, rr: rr**2 + 1 - 2*r**2*rr
    raw_dual_eq2 = lambda self, r, rr: (r-1)*(rr-1)-2
    raw_dual2 = lambda self, r: (r+1)/(r-1)

    raw_turn_tail_one2 = lambda self, r: -r
    raw_turn_head_one2 = lambda self, r: 1/r
    raw_turn_tail_two2 = lambda self, r: self.S.i*r
    raw_turn_head_two2 = lambda self, r: (-self.S.i*r + 1)/(r - self.S.i)


@child(Level1)
class Level3(Parameter):
    """Deuring discriminant Δ"""
    LETTER = "Δ"
    GENUS = 0
    LEVEL = 3
    DEGREE = 4
    EXP = defaultdict(int, {3: 1})
    TREE = {
        0: lambda D: D.proj(0),
        1: lambda D: D.proj(1),
    }
    TREE_EDGES = {3: [(0, 1)]}
    SYMMETRY_GENERATORS = dict(
        dual=lambda D: D.dual(3),
    )

    raw_to_Maier = lambda self, t: t
    raw_from_Maier = lambda cls, t: t

    raw_left3 = lambda self, D: (D + 27)*(D + 3**5)**3/D**3
    raw_right3 = lambda self, D: (D + 27)*(D + 3)**3/D
    raw_dual_eq3 = lambda self, D, DD: D*DD - 3**6
    raw_dual3 = lambda self, D: 3**6 / D

    raw_phi_eq3 = lambda self, D, DD: D**3*DD**2 + 36*D**2*DD**2 + 729*D**2*DD + 270*D*DD**2 - DD**3 + 26244*D*DD + 531441*D
    raw_merge3 = (
        lambda self, l, r:
        (l**2*r + 21*l*r + 729*l + 54*r + 2187)
        / (l*r - 243*l + 9*r + 729)
    )

    raw_phi_eq2 = lambda self, l, r: l**2*r**2 - l**3 + 24*l**2*r + 24*l*r**2 - r**3 + 729*l*r
    raw_merge2 = (
        lambda self, l, r:
        (l*r + r**2 + 81*r) / (l*r + 9*l + 9*r)
    )


@child(Level3)
class Level9(Parameter):
    """Deuring coefficient δ"""
    LETTER = "δ"
    GENUS = 0
    LEVEL = 9
    DEGREE = 12
    EXP = defaultdict(int, {3: 2})

    TREE = {
        0: lambda d: d.proj(0),
        1: lambda d: d.proj(1),
        2: lambda d: d.proj(2),
        #
        3: lambda d: d.turn_tail_one().proj(0),
        4: lambda d: d.turn_tail_one().turn_tail_one().proj(0),
    }
    #  3   4
    #   \ /
    # 0--1--2
    TREE_EDGES = {3: [(0, 1), (1, 2), (3, 1), (4, 1)]}
    SYMMETRY_GENERATORS = dict(
        dual=lambda A: A.dual(3),
        turn_tail_one=lambda A: A.turn_tail_one(),
    )

    #j = d**3 * (d**3 - 24)**3 / (d**3 - 27)
    #j = (D + 27) * (D + 3)**3 / D

    raw_to_Maier = lambda self, t: t-3
    raw_from_Maier = lambda cls, t: t+3

    raw_left3 = lambda self, d: (d - 3)**3 / (d**2 + 3*d + 9)
    raw_right3 = lambda self, d: d**3 - 27  # (d**2 + 3*d + 9) * (d - 3)
    raw_phi_eq3 = lambda self, d, dd: (dd**2 + 3*dd + 9) * (d**3 - 27) - (dd - 3)**3
    raw_dual_eq3 = lambda self, d, dd: (d - 3) * (dd - 3) - 27
    raw_dual3 = lambda self, d: 27 / (d-3) + 3  # = 3(d+6)/(d-3)

    raw_merge2 = lambda self, l, r: (r**2 - 3*l) / (l*r - 9)

    raw_turn_tail_one3 = lambda self, t: t * self.S.ζ3
    raw_turn_head_one3 = lambda self, t: ((-3*self.S.ζ3 - 3)*t + 18)/(t - 3*self.S.ζ3)

    raw_phi_eq2 = lambda self, l, r: l**2*r**2 - l**3 - r**3 - 9*l*r + 54
    # weird! cube root(j) satisfy eq2 l**2*r**2 - l**3 - r**3 - 495*l*r + 54000

    # γ2(τ) = j^1/3
    raw_gamma2 = lambda self, d: d*(d**3+216)/(d**3-27)
    gamma2 = lambda self: Gamma2(self.raw_gamma2(self.value), S=self.S)
    # NOTE: ζ3 commutes with gamma2 !
    # https://arxiv.org/pdf/math/0611041.pdf p.17
    # t9 = d - 3
    # f = (t9+3)*(t9+9)*(t9**2+27) / t9 / (t9**2 + 9*t9 + 27)



@child(Level2)
@child(Level3)
class Level6(Parameter):
    #LETTER = "?"
    GENUS = 0
    LEVEL = 6
    DEGREE = 12
    EXP = defaultdict(int, {2: 1, 3: 1})

    TREE = {
        0: lambda d: d.left(3).proj(0),
        1: lambda d: d.left(3).proj(1),
        2: lambda d: d.right(3).proj(0),
        3: lambda d: d.right(3).proj(1),
    }
    # 0-(2)-1
    # |     |
    #(3)   (3)
    # |     |
    # 2-(2)-3
    TREE_EDGES = {
        2: [(0, 1), (2, 3)],
        3: [(0, 2), (1, 3)],
    }
    SYMMETRY_GENERATORS = dict(
        dual2=lambda A: A.dual(2),
        dual3=lambda A: A.dual(3),
    )

    raw_to_Maier = lambda self, t: t-9
    raw_from_Maier = lambda cls, t: t+9

    raw_left3 = lambda self, a: (a - 1) * (a - 9)**3 / a**3
    raw_right3 = lambda self, a: (a - 9) * (a - 1)**3 / a
    raw_phi_eq3 = lambda self, a, b: -a**3*b**2 + 12*a**2*b**2 - 9*a**2*b - 30*a*b**2 + b**3 + 108*a*b - 81*a
    raw_dual_eq3 = lambda self, a, b: a*b - 9
    raw_dual3 = lambda self, a: 9/a
    raw_merge3 = (
        lambda self, l, r:
        (l**2*r - 7*l*r + 9*l + 6*r - 9) / (l*r + 9*l - 3*r + 9)
    )

    raw_left2 = lambda self, a: a * (a - 9)**2 / (a - 1)**2
    raw_right2 = lambda self, a: (a - 9) * a**2 / (a - 1)
    raw_phi_eq2 = lambda self, a, b: -a**2*b + a**2 + 8*a*b + b**2 - 9*b
                                    #(a+b)**2 - b*(a**2 - 6*a + 9)
                                    #(a+b)**2 - b*(a-3)**2
    raw_dual_eq2 = lambda self, a, b: a*b - a - b + 9
    raw_dual2 = lambda self, a: (a - 9)/(a - 1)
    raw_merge2 = lambda self, l, r: (l + r) / (l - 3)


@child(Level4)
@child(Level6)
class Level12(Parameter):
    #LETTER = "?"
    GENUS = 0
    LEVEL = 12
    DEGREE = 24
    EXP = defaultdict(int, {2: 2, 3: 1})

    TREE = {
        0: lambda d: d.left(3).leaf(0),
        1: lambda d: d.left(3).leaf(1),
        2: lambda d: d.left(3).leaf(2),
        3: lambda d: d.left(3).leaf(3),

        4: lambda d: d.right(3).leaf(0),
        5: lambda d: d.right(3).leaf(1),
        6: lambda d: d.right(3).leaf(2),
        7: lambda d: d.right(3).leaf(3),
    }
    #   3
    # 0-1-2
    #   |
    #  (3)
    #   |
    # 4-5-6
    #   7
    TREE_EDGES = {
        2: [
            (0, 1), (1, 2), (1, 3),
            (4, 5), (5, 6), (5, 7),
        ],
        3: [
            (0, 4), (1, 5), (2, 6), (3, 7)
        ],
    }
    SYMMETRY_GENERATORS = dict(
        dual2=lambda A: A.dual(2),
        dual3=lambda A: A.dual(3),
        turn_tail_one2=lambda A: A.turn_tail_one(2),
    )

    raw_to_Maier = lambda self, t: t-3
    raw_from_Maier = lambda cls, t: t+3

    raw_left2 = lambda self, a: a * (a + 3) / (a - 1)
    raw_right2 = lambda self, a: a**2
    raw_phi_eq2 = lambda self, a, b: -a**2*b + a**2 + b**2 + 3*b
                                   # a**2*(1-b) + b*(b+3)
                                   # (a+b)**2 - b*(a**2 + 2a + 3)
    raw_dual_eq2 = lambda self, a, b: a*b + a + b - 3
    raw_dual2 = lambda self, a: (-a + 3)/(a + 1)

    raw_left3 = lambda self, a:  (a**4 + 18*a**2 - 27) / (-4 * a**3)
    raw_right3 = lambda self, a: (a**4 - 6*a**2 - 3) / (-4 * a)
    raw_phi_eq3 = lambda self, a, b: -a**3*b**2 + 3*a**2*b + 6*a*b**2 + b**3 - 9*a

    raw_dual_eq3 = lambda self, a, b:  a*b + 3
    raw_dual3 = lambda self, a: -3/a

    raw_turn_tail_one2 = lambda self, a: -a
    raw_turn_head_one2 = lambda self, a: (a + 3) / (a - 1)

    # note: keeps the middle $j$-invariant of X_0(4) part
    raw_gamma3_level3 = lambda self, a: -(a**3 - 9*a)/(a**2-1)
    gamma3_level3 = lambda self: Gamma3_Level3(self.raw_gamma3_level3(self.value), S=self.S)


@child(Level2)
@child(Level6)
@child(Level9)
class Level18(Parameter):
    #LETTER = "β"
    GENUS = 0
    LEVEL = 18
    DEGREE = 36
    EXP = defaultdict(int, {2: 1, 3: 2})

    TREE = {
        0: lambda d: d.left(2).leaf(0),
        1: lambda d: d.left(2).leaf(1),
        2: lambda d: d.left(2).leaf(2),
        3: lambda d: d.left(2).leaf(3),
        4: lambda d: d.left(2).leaf(4),

        5: lambda d: d.right(2).leaf(0),
        6: lambda d: d.right(2).leaf(1),
        7: lambda d: d.right(2).leaf(2),
        8: lambda d: d.right(2).leaf(3),
        9: lambda d: d.right(2).leaf(4),
    }
    #  3   4
    #   \ /
    # 0--1--2
    #    |
    #   (2)
    #    |
    # 5--6--7
    #   / \
    #  8   9
    TREE_EDGES = {
        2: [
            (0, 5), (1, 6), (2, 7),
            # (3, 8), (4, 9),
            (3, 9), (4, 8),  # 2-isogeny anti-commutes with the tail turn! (swaps ζ3 and ζ3^2=-1-ζ3=1/ζ3)
        ],
        3: [
            (0, 1), (1, 2), (3, 1), (4, 1),
            (5, 6), (6, 7), (8, 6), (9, 6),
        ],
    }
    SYMMETRY_GENERATORS = dict(
        dual2=lambda A: A.dual(2),
        dual3=lambda A: A.dual(3),
        turn_tail_one3=lambda A: A.turn_tail_one(3),
    )

    raw_to_Maier = lambda self, t: t-2
    raw_from_Maier = lambda cls, t: t+2

    raw_left2 = lambda self, a: (a**3 + 4) / a**2
    raw_right2 = lambda self, a: (a**3 - 2) / a
    raw_phi_eq2 = lambda self, a, b: -a**2*b + b**2 + 2*a

    raw_dual_eq2 = lambda self, a, b: a*b + 2
    raw_dual2 = lambda self, a: -2/a

    raw_left3 = lambda self, a: (a + 1)**3 / (a**2 - a + 1)
    raw_right3 = lambda self, a: a**3 + 1
    raw_phi_eq3 = lambda self, a, b: -a**3*b**2 + a**3*b - a**3 + b**3 + 2*b**2 + 4*b
    raw_dual_eq3 = lambda self, a, b: a*b + a + b - 2
    raw_dual3 = lambda self, a: (-a + 2)/(a + 1)

    raw_turn_tail_one3 = lambda self, a: a * self.S.ζ3
    raw_turn_head_one3 = lambda self, a: self.raw_dual3(self.raw_dual3(a) * self.S.ζ3)
    # (a*z + 2*a - 2*z + 2)/(-a*z + a + 2*z + 1)

    # old hand made
    # raw_left = lambda self, d: (2*d**3+1)/d**2
    # raw_right = lambda self, d: (4*d**3+1)/d
    # raw_phi_eq = lambda A, B: -A**2*B + B^2 + 2*A

    # see Colo's thesis p.108 Fig. 3.6
    #raw_gamma2_level2 = lambda self, a: 16*(a**3+1)/((a**3-8)*a)
    # we compose with the 2-duality map to ensure consistency with the X0(18)->X(2) cover LR
    raw_gamma2_level2 = lambda self, a: a * (a**3-8) / (a**3+1)

    gamma2_level2 = lambda self: Gamma2_Level2(self.raw_gamma2_level2(self.value), S=self.S)


@child(Level1)
class Level5(Parameter):
    #LETTER = "D"
    GENUS = 0
    LEVEL = 5
    DEGREE = 6
    EXP = defaultdict(int, {5: 1})
    TREE = {
        0: lambda t: t.proj(0),
        1: lambda t: t.proj(1),
    }
    TREE_EDGES = {5: [(0, 1)]}
    SYMMETRY_GENERATORS = dict(
        dual=lambda D: D.dual(5),
    )

    raw_to_Maier = lambda self, t: t
    raw_from_Maier = lambda cls, t: t

    # also: Colo's thesis, p.106
    raw_left5 = lambda self, a: (a**2 + 250*a + 3125)**3 / a**5
    raw_right5 = lambda self, a: (a**2 + 10*a + 5)**3 / a
    raw_phi_eq5 = lambda self, a, b: (-a**5*b**4 - 30*a**4*b**4 - 125*a**4*b**3 - 315*a**3*b**4 - 3750*a**3*b**3 - 1300*a**2*b**4 - 15625*a**3*b**2 - 39375*a**2*b**3 - 1575*a*b**4 + b**5 - 468750*a**2*b**2 - 162500*a*b**3 - 1953125*a**2*b - 4921875*a*b**2 - 58593750*a*b - 244140625*a)
    raw_dual_eq5 = lambda self, a, b: a*b - 125
    raw_dual5 = lambda self, a: 125 / a
    raw_merge5 = (
        lambda self, l, r: \
        (-50*l**3*r**2 + l**2*r**3 - 750*l**2*r**2 + 11*l*r**3 - 3125*l**2*r - 2625*l*r**2 + 20*r**3 - 59375*l*r + 2625*r**2 - 390625*l + 62500*r + 390625) \
        / (l*r**3 + 375*l*r**2 + 5*r**3 + 34375*l*r + 1375*r**2 + 390625*l + 46875*r + 390625)
    )

    raw_phi_eq2 = lambda self, a, b: a**2*b**2 - a**3 + 12*a**2*b + 12*a*b**2 - b**3 + 125*a*b
    raw_merge2 = (
        lambda self, l, r: \
        (r**2 - 5*l + 20*r) / (l*r + 5*l + 5*r)
    )

    raw_phi_eq3 = lambda self, a, b: a**3*b**3 + 18*a**3*b**2 + 18*a**2*b**3 - a**4 + 81*a**3*b + 414*a**2*b**2 + 81*a*b**3 - b**4 + 2250*a**2*b + 2250*a*b**2 + 15625*a*b
    # raw_merge3 = (
    #     lambda self, l, r: \
    # )

    def down_tree(self):
        v = self.value
        # v = -11 - 20*x/(x**2-25)
        # (x**2-25)*v = -11 - 20*x
        rs = self.S.roots(lambda x: (x**2-25)*v + 11 + 20*x)
        return Level5_Tree(rs[0], self.S)


@child(Level5)
class Level25(Parameter):
    #LETTER = "?"
    GENUS = 0
    LEVEL = 25
    DEGREE = 30
    EXP = defaultdict(int, {5: 2})

    TREE = {
        0: lambda d: d.proj(0),
        1: lambda d: d.proj(1),
        2: lambda d: d.proj(2),
        #
        # 3: lambda d: d.turn_tail_one().proj(0),
        # 4: lambda d: d.turn_tail_one().turn_tail_one().proj(0),
        # 5: lambda d: d.turn_tail_one().turn_tail_one().turn_tail_one().proj(0),
        # 6: lambda d: d.turn_tail_one().turn_tail_one().turn_tail_one().turn_tail_one().proj(0),
    }
    #  3...6
    #   \ /
    # 0--1--2
    TREE_EDGES = {5: [(0, 1), (1, 2)]}
    #TREE_EDGES = {3: [(0, 1), (1, 2), (3, 1), (4, 1), (1, 5), (1, 6)]}
    SYMMETRY_GENERATORS = dict(
        dual=lambda A: A.dual(5),
        #turn_tail_one=lambda A: A.turn_tail_one(),
    )

    raw_to_Maier = lambda self, t: t-1
    raw_from_Maier = lambda cls, t: t+1

    raw_left5 = lambda self, a: (a - 1)**5 / (a**4 + a**3 + 6*a**2 + 6*a + 11)
    raw_right5 = lambda self, a: (a - 1) * (a**4 + a**3 + 6*a**2 + 6*a + 11)
    raw_phi_eq5 = lambda self, a, b: (-a**5*b**4 - a**5*b**3 - 6*a**5*b**2 - 5*a**3*b**4 - 6*a**5*b - 5*a**3*b**3 - 11*a**5 - 30*a**3*b**2 - 5*a*b**4 + b**5 - 30*a**3*b - 5*a*b**3 + 6*b**4 - 55*a**3 - 30*a*b**2 + 21*b**3 - 30*a*b + 56*b**2 - 55*a + 71*b + 120)
    raw_dual_eq5 = lambda self, a, b: a*b - a - b - 4
    raw_dual5 = lambda self, a: (a + 4)/(a - 1)

    # raw_turn_tail_one5 = lambda self, t: ?
    raw_phi_eq2 = lambda self, a, b: a**2*b**2 - a**3 - b**3 + 2*a**2 + a*b + 2*b**2 - 4*a - 4*b + 4*1
    raw_phi_eq3 = lambda self, a, b: a**3*b**3 - a**4 + 3*a**3*b + 3*a*b**3 - b**4 - 3*a**2*b - 3*a*b**2 - 3*a**2 + 10*a*b - 3*b**2 - 6*a - 6*b + 9

    #raw_merge1 = ?

    def down_tree(self):
        rs = self.S.roots(lambda t: (1-t**2)*self.value - 4*t)
        return Level25_Tree(rs[0], self.S)

    def to_X1(self):
        func = Level5_X1().to_X0().value
        g = func.numerator()
        h = func.denominator()
        res = []
        for r in self.roots(lambda x: self.value * h - g):
            res.append( Level5_X1(r, S=self.S) )
            assert res[-1].to_X0().value == self.value
        return


@extra_child(Level5)
@extra_child(Level1)
class Level5_X1(Parameter):
    GENUS = 0
    LEVEL = 5
    DEGREE = 12
    DEFAULT_SETTING = Sqrt5Setting()
    EXP = defaultdict(int, {5: 1})

    TREE = {
        0: lambda r: r.proj(0),
        1: lambda r: r.proj(1),
    }
    # ??? TREE_EDGES = {}
    SYMMETRY_GENERATORS = dict(
        # dual and mirror commute
        dual=lambda R: R.dual(5),
        mirror=lambda R: R.mirror(5),
    )

    # Colo's thesis p.106
    # we take dual of t5 (which is 125/t) in Colo's relation t5(v)
    # since it makes X5 more consistent with other curves
    # e.g. the covering t**5  is on the right
    # t = -(a**2 + 11*a - 1)/a
    to_X0 = lambda self: Level5(-(self.value**2 + 11*self.value - 1)/self.value, S=self.S)

    def raw_left5(self, t):
        return self.new(t).to_X0().left().value

    def raw_right5(self, t):
        return self.new(t).to_X0().right().value

    @property
    def _const_dual(self):
        return self.S.ONE*11/2 + self.S.SQRT5*5/2

    raw_mirror5 = lambda self, t: -1/t
    raw_phi_eq5 = lambda self, a, b: -a**5*b**4 - 22*a**5*b**3 - 25*a**4*b**4 - 119*a**5*b**2 - 475*a**4*b**3 - 200*a**3*b**4 + 22*a**5*b - 2175*a**4*b**2 - 1675*a**3*b**3 - 525*a**2*b**4 - a**5 + 200*a**4*b - 9650*a**3*b**2 + 9650*a**2*b**3 - 200*a*b**4 + b**5 - 525*a**3*b - 1675*a**2*b**2 - 2175*a*b**3 + 22*b**4 + 200*a**2*b + 475*a*b**2 + 119*b**3 - 25*a*b - 22*b**2 + b
    raw_dual_eq5 = lambda self, a, b: (a + self._const_dual) * (b + self._const_dual) - (2 + 11 * self._const_dual)
    # raw_dual5 = lambda self, t: (2 + 11 * self._const_dual) / (t + self._const_dual) - self._const_dual

    raw_dual5 = lambda self, t: (-t*self._const_dual+1) / (t + self._const_dual)
    # <Level5_X1:t=((-5/2*s5 - 11/2)*t + 1)/(t + 5/2*s5 + 11/2)>

    raw_merge5 = lambda self, l, r: (20*l**4*r**3 + 655*l**4*r**2 + 390*l**3*r**3 + 4765*l**4*r + 10510*l**3*r**2 + 2165*l**2*r**3 - 2*l*r**4 - 435*l**4 + 52405*l**3*r + 23760*l**2*r**2 + 2816*l*r**3 - 10*r**4 + 3155*l**3 + 75980*l**2*r - 58248*l*r**2 + 435*r**3 - 1195*l**2 - 111*l*r + 6005*r**2 + 93*l - 545*r) \
        / (15625*l**3*r - 75*l**2*r**2 + 145*l*r**3 - 2*r**4 - 9375*l**3 + 115425*l**2*r - 36745*l*r**2 + 391*r**3 + 8200*l**2 + 7490*l*r + 4452*r**2 - 1660*l - 1436*r + 93)


@extra_child(Level25)
@child(Level5_X1)
class Level25_X5(Parameter):
    GENUS = 0
    LEVEL = 25
    DEGREE = 60
    DEFAULT_SETTING = Sqrt5Zeta5Setting()
    EXP = defaultdict(int, {5: 2})

    TREE = {
        0: lambda d: d.proj(0),
        1: lambda d: d.proj(1),
        2: lambda d: d.proj(2),
        3: lambda d: d.turn_tail_one(d=5, num=1).proj(0),
        4: lambda d: d.turn_tail_one(d=5, num=2).proj(0),
        5: lambda d: d.turn_tail_one(d=5, num=3).proj(0),
        6: lambda d: d.turn_tail_one(d=5, num=4).proj(0),
    }
    SYMMETRY_GENERATORS = dict(
        turn_tail_one=lambda A: A.turn_tail_one(5),
        mirror=lambda A: A.mirror(5),
        dual=lambda A: A.dual(5),
    )
    #  3,4,5,6
    #      \
    # 0 --- 1 --- 2

    # a^2 + a*T - 1 = 0
    to_X0 = lambda self: Level25((1-self.value)**2/self.value, S=self.S)

    raw_left5 = lambda self, t: (t**5 - 3*t**4 + 4*t**3 - 2*t**2 + t)/(t**4 + 2*t**3 + 4*t**2 + 3*t + 1)
    raw_right5 = lambda self, t: t**5

    raw_phi_eq5 = lambda self, a, b: -a**5*b**4 - 2*a**5*b**3 - 4*a**5*b**2 - 3*a**5*b - a**5 + b**5 - 3*b**4 + 4*b**3 - 2*b**2 + b

    raw_mirror5 = lambda self, t: 1/t

    @property
    def _const_turn_head(self):
        return self.S.ζ5**2 + self.S.ζ5 + 2

    raw_turn_tail_one5 = lambda self, t: self.S.ζ5 * t
    raw_turn_head_one5 = lambda self, t: (self._const_turn_head*t - 1)/(t + self._const_turn_head - 3)

    # (t*d + (1/2*s5 + 1/2)*t + (1/2*s5 + 1/2)*d - 1, 1)
    # (t+c)(d+c) = 1+c^2 = 1/2*s5 + 5/2 = C
    # d=C/(t+c)-c = (1-ct)/(t+c)
    @property
    def _const_dual(self):
        return (self.S.SQRT5+1)/2  # Fibonacci

    raw_dual_eq5 = lambda self, a, b: (a + self._const_dual) * (b + self._const_dual) - (1 + self._const_dual**2)

    raw_dual5 = lambda self, t: (-t*self._const_dual+1) / (t + self._const_dual)


@child(Level2)
@child(Level5)
class Level10(Parameter):
    #LETTER = "?"
    GENUS = 0
    LEVEL = 10
    DEGREE = 18
    EXP = defaultdict(int, {2: 1, 5: 1})

    TREE = {
        0: lambda d: d.left(5).proj(0),
        1: lambda d: d.left(5).proj(1),
        2: lambda d: d.right(5).proj(0),
        3: lambda d: d.right(5).proj(1),
    }
    # 0-(2)-1
    # |     |
    #(5)   (5)
    # |     |
    # 2-(2)-3
    TREE_EDGES = {
        2: [(0, 1), (2, 3)],
        5: [(0, 2), (1, 3)],
    }
    SYMMETRY_GENERATORS = dict(
        dual2=lambda A: A.dual(2),
        dual5=lambda A: A.dual(5),
    )

    raw_to_Maier = lambda self, t: t-4
    raw_from_Maier = lambda cls, t: t+4

    raw_left5 = lambda self, a: a * (a - 4)**5 / (a + 1)**5
    raw_right5 = lambda self, a: (a - 4) * a**5 / (a + 1)
    raw_phi_eq5 = lambda self, a, b: (-a**5*b**4 - 4*a**5*b**3 + 5*a**4*b**4 - 6*a**5*b**2 + 15*a**4*b**3 - 5*a**3*b**4 - 4*a**5*b + 15*a**4*b**2 + 10*a**3*b**3 + 5*a**2*b**4 - a**5 + 5*a**4*b + 35*a**3*b**2 - 35*a**2*b**3 - 5*a*b**4 + b**5 + 20*a**3*b + 40*a**2*b**2 + 60*a*b**3 - 16*b**4 + 80*a**2*b - 240*a*b**2 + 96*b**3 + 320*a*b - 256*b**2 + 256*b)
    #simplifies to -a^5*b^4 + 10*a^4*b^4 - 5*a^4*b^3 - 35*a^3*b^4 + 50*a^3*b^3 + 60*a^2*b^4 - 25*a^3*b^2 - 175*a^2*b^3 - 55*a*b^4 + b^5 + 250*a^2*b^2 + 300*a*b^3 - 125*a^2*b - 875*a*b^2 + 1250*a*b - 625*a
    # if a=a-1, b=b-1
    raw_dual_eq5 = lambda self, a, b: a*b + a + b - 4
    raw_dual5 = lambda self, a: (-a + 4)/(a + 1)

    raw_left2 = lambda self, a: (a + 1) * (a - 4)**2 / a**2
    raw_right2 = lambda self, a: (a - 4) * (a + 1)**2 / a
    raw_phi_eq2 = lambda self, a, b: -a*b*(a-2) + b**2 + 4*a
    raw_dual_eq2 = lambda self, a, b: a*b + 4
    raw_dual2 = lambda self, a: -4/a

    raw_phi_eq_3 = lambda self, a, b: a**3*b**3 - 3*a**3*b**2 - 3*a**2*b**3 - a**4 + 3*a**2*b**2 - b**4 + 12*a**2*b + 12*a*b**2 + 16*a*b


@child(Level1)
class Level7(Parameter):
    #LETTER = "D"
    GENUS = 0
    LEVEL = 7
    DEGREE = 8
    EXP = defaultdict(int, {7: 1})
    TREE = {
        0: lambda t: t.proj(0),
        1: lambda t: t.proj(1),
    }
    TREE_EDGES = {7: [(0, 1)]}
    SYMMETRY_GENERATORS = dict(
        dual=lambda D: D.dual(7),
    )

    raw_to_Maier = lambda self, t: t
    raw_from_Maier = lambda cls, t: t

    raw_left7 = lambda self, a: (a**2 + 13*a + 49) * (a**2 + 245*a + 2401)**3 / a**7
    raw_right7 = lambda self, a: (a**2 + 13*a + 49) * (a**2 + 5*a + 1)**3 / a
    raw_phi_eq7 = lambda self, a, b: (-a**7*b**6 - 28*a**6*b**6 - 49*a**6*b**5 - 322*a**5*b**6 - 1372*a**5*b**5 - 1904*a**4*b**6 - 2401*a**5*b**4 - 15778*a**4*b**5 - 5915*a**3*b**6 - 67228*a**4*b**4 - 93296*a**3*b**5 - 8624*a**2*b**6 - 117649*a**4*b**3 - 773122*a**3*b**4 - 289835*a**2*b**5 - 4018*a*b**6 + b**7 - 3294172*a**3*b**3 - 4571504*a**2*b**4 - 422576*a*b**5 - 5764801*a**3*b**2 - 37882978*a**2*b**3 - 14201915*a*b**4 - 161414428*a**2*b**2 - 224003696*a*b**3 - 282475249*a**2*b - 1856265922*a*b**2 - 7909306972*a*b - 13841287201*a)
    raw_dual_eq7 = lambda self, a, b: a * b - 49
    raw_dual7 = lambda self, a: 49 / a

    raw_phi_eq2 = lambda self, a, b: 3*a**2*b**2 - 3*a**3 + 24*a**2*b + 24*a*b**2 - 3*b**3 + 147*a*b
    raw_phi_eq3 = lambda self, a, b: a**3*b**3 + 12*a**3*b**2 + 12*a**2*b**3 - a**4 + 42*a**3*b + 159*a**2*b**2 + 42*a*b**3 - b**4 + 588*a**2*b + 588*a*b**2 + 2401*a*b



@child(Level1)
class Level13(Parameter):
    #LETTER = "D"
    GENUS = 0
    LEVEL = 13
    DEGREE = 14
    EXP = defaultdict(int, {13: 1})
    TREE = {
        0: lambda t: t.proj(0),
        1: lambda t: t.proj(1),
    }
    TREE_EDGES = {13: [(0, 1)]}
    SYMMETRY_GENERATORS = dict(
        dual=lambda D: D.dual(13),
    )

    raw_to_Maier = lambda self, t: t
    raw_from_Maier = lambda cls, t: t

    raw_left13 = lambda self, a: (a**2 + 5*a + 13) * (a**4 + 247*a**3 + 3380*a**2 + 15379*a + 28561)**3 / a**13
    raw_right13 = lambda self, a: (a**2 + 5*a + 13) * (a**4 + 7*a**3 + 20*a**2 + 19*a + 1)**3 / a
    raw_phi_eq13 = lambda self, a, b: (-a**13*b**12 - 26*a**12*b**12 - 13*a**12*b**11 - 325*a**11*b**12 - 338*a**11*b**11 - 2548*a**10*b**12 - 169*a**11*b**10 - 4225*a**10*b**11 - 13832*a**9*b**12 - 4394*a**10*b**10 - 33124*a**9*b**11 - 54340*a**8*b**12 - 2197*a**10*b**9 - 54925*a**9*b**10 - 179816*a**8*b**11 - 157118*a**7*b**12 - 57122*a**9*b**9 - 430612*a**8*b**10 - 706420*a**7*b**11 - 333580*a**6*b**12 - 28561*a**9*b**8 - 714025*a**8*b**9 - 2337608*a**7*b**10 - 2042534*a**6*b**11 - 509366*a**5*b**12 - 742586*a**8*b**8 - 5597956*a**7*b**9 - 9183460*a**6*b**10 - 4336540*a**5*b**11 - 534820*a**4*b**12 - 371293*a**8*b**7 - 9282325*a**7*b**8 - 30388904*a**6*b**9 - 26552942*a**5*b**10 - 6621758*a**4*b**11 - 354536*a**3*b**12 - 9653618*a**7*b**7 - 72773428*a**6*b**8 - 119384980*a**5*b**9 - 56375020*a**4*b**10 - 6952660*a**3*b**11 - 124852*a**2*b**12 - 4826809*a**7*b**6 - 120670225*a**6*b**7 - 395055752*a**5*b**8 - 345188246*a**4*b**9 - 86082854*a**3*b**10 - 4608968*a**2*b**11 - 15145*a*b**12 + b**13 - 125497034*a**6*b**6 - 946054564*a**5*b**7 - 1552004740*a**4*b**8 - 732875260*a**3*b**9 - 90384580*a**2*b**10 - 1623076*a*b**11 - 62748517*a**6*b**5 - 1568712925*a**5*b**6 - 5135724776*a**4*b**7 - 4487447198*a**3*b**8 - 1119077102*a**2*b**9 - 59916584*a*b**10 - 1631461442*a**5*b**5 - 12298709332*a**4*b**6 - 20176061620*a**3*b**7 - 9527378380*a**2*b**8 - 1174999540*a*b**9 - 815730721*a**5*b**4 - 20393268025*a**4*b**5 - 66764422088*a**3*b**6 - 58336813574*a**2*b**7 - 14548002326*a*b**8 - 21208998746*a**4*b**4 - 159883221316*a**3*b**5 - 262288801060*a**2*b**6 - 123855918940*a*b**7 - 10604499373*a**4*b**3 - 265112484325*a**3*b**4 - 867937487144*a**2*b**5 - 758378576462*a*b**6 - 275716983698*a**3*b**3 - 2078481877108*a**2*b**4 - 3409754413780*a*b**5 - 137858491849*a**3*b**2 - 3446462296225*a**2*b**3 - 11283187332872*a*b**4 - 3584320788074*a**2*b**2 - 27020264402404*a*b**3 - 1792160394037*a**2*b - 44804009850925*a*b**2 - 46596170244962*a*b - 23298085122481*a)
    raw_dual_eq13 = lambda self, a, b: a*b - 13
    raw_dual13 = lambda self, a: 13/a

    raw_phi_eq2 = lambda self, a, b: a**2*b**2 - a**3 + 4*a**2*b + 4*a*b**2 - b**3 + 13*a*b
    raw_phi_eq3 = lambda self, a, b: a**3*b**3 + 6*a**3*b**2 + 6*a**2*b**3 - a**4 + 15*a**3*b + 33*a**2*b**2 + 15*a*b**3 - b**4 + 78*a**2*b + 78*a*b**2 + 169*a*b


def expanded_to_cycles(v, v2, debug=True):
    perm = {}
    for i in range(len(v)):
        perm[i] = v2.index(v[i])

    cycles = []
    pr = perm.copy()
    while pr:
        for c in pr:
            break
        cycle = [c]
        while True:
            c = pr.pop(c)
            cycle.append(c)
            if c == cycle[0]:
                break
        cycle.pop()
        cycles.append(cycle)
        if debug and len(cycle) > 1:
            print("(" + "".join("j_{%d}" % i for i in cycle) + ")", end="")
    if debug:
        print()
    return cycles

def _incl(lst):
    return tuple(a+1 for a in lst)


def _tomat(f):
    a, b = _poly2lin(f.numerator())
    c, d = _poly2lin(f.denominator())
    mat = matrix(a.parent(), 2, 2, [a, b, c, d])
    mat = mat / mat.det().sqrt()
    mat = mat.transpose()
    m1 = mat
    m2 = -mat
    if str(m1) < str(m2):
        return m1
    return m2

def _poly2lin(f):
    try:
        F = f.base_ring()
        t = F(f)
        a, b = F(0), t
        assert f == t
    except TypeError:
        b = f(0)
        a = f(1) - b
        var, = f.parent().gens()
        assert f == var * a + b
    return a, b


def applyN(method, num, value):
    for _ in range(num):
        value = method(value)
    return value
